(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS["Type.Data.Row"] = PS["Type.Data.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };                                    
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["EqRecord"] = EqRecord;
  exports["eqRecord"] = eqRecord;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
      this.addRecord = addRecord;
      this.mulRecord = mulRecord;
      this.oneRecord = oneRecord;
      this.zeroRecord = zeroRecord;
  };
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringRecordNil = new SemiringRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function (dictRowToList) {
      return function (dictSemiringRecord) {
          return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return new SemiringRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(one(dictSemiring))(tail);
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(zero(dictSemiring))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["SemiringRecord"] = SemiringRecord;
  exports["addRecord"] = addRecord;
  exports["mulRecord"] = mulRecord;
  exports["oneRecord"] = oneRecord;
  exports["zeroRecord"] = zeroRecord;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var RingRecord = function (SemiringRecord0, subRecord) {
      this.SemiringRecord0 = SemiringRecord0;
      this.subRecord = subRecord;
  };
  var subRecord = function (dict) {
      return dict.subRecord;
  };
  var sub = function (dict) {
      return dict.sub;
  }; 
  var ringRecordNil = new RingRecord(function () {
      return Data_Semiring.semiringRecordNil;
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var ringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictRingRecord) {
              return function (dictRing) {
                  return new RingRecord(function () {
                      return Data_Semiring.semiringRecordCons(dictIsSymbol)(dictCons)(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  var ringRecord = function (dictRowToList) {
      return function (dictRingRecord) {
          return new Ring(function () {
              return Data_Semiring.semiringRecord(dictRowToList)(dictRingRecord.SemiringRecord0());
          }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["RingRecord"] = RingRecord;
  exports["subRecord"] = subRecord;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringRecord"] = ringRecord;
  exports["ringRecordNil"] = ringRecordNil;
  exports["ringRecordCons"] = ringRecordCons;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 119, column 3 - line 122, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];                 
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 231, column 62: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOfMap = function (dictFoldable) {
      return function (dictPlus) {
          return function (f) {
              return foldr(dictFoldable)(function ($194) {
                  return Control_Alt.alt(dictPlus.Alt0())(f($194));
              })(Control_Plus.empty(dictPlus));
          };
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["oneOfMap"] = oneOfMap;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 8 - line 35, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 220, column 1 - line 220, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  }; 
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["forever"] = forever;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.run = function (f) {
    return f();
  };

  exports["while"] = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["run"] = $foreign.run;
  exports["while"] = $foreign["while"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Effect = PS["Effect"];                 
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS["Effect.Class"] = PS["Effect.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (v) {
          return function ($108) {
              return f(v($108));
          };
      };
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["mapStateT"] = mapStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Ref = PS["Effect.Ref"];
  var Prelude = PS["Prelude"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              return function ($17) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function ($18) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($18));
                  })($17));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var parOneOf = function (dictParallel) {
      return function (dictAlternative) {
          return function (dictFoldable) {
              return function (dictFunctor) {
                  return function ($23) {
                      return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel))($23));
                  };
              };
          };
      };
  };
  exports["parTraverse_"] = parTraverse_;
  exports["parSequence_"] = parSequence_;
  exports["parOneOf"] = parOneOf;
})(PS["Control.Parallel"] = PS["Control.Parallel"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicate : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unsafeFreeze = function ($12) {
      return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)($12);
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["empty"] = $foreign.empty;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Monad_ST_Ref = PS["Control.Monad.ST.Ref"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];                 
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var next = function (v) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.read(v.value1))(function (v1) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal.modify(function (v2) {
              return v2 + 1 | 0;
          })(v.value1))(function (v2) {
              return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v.value0(v1));
          });
      });
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Monad_ST_Internal["new"](false))(function (v) {
              return Control_Monad_ST_Internal["while"](Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read(v)))(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(next(iter))(function (v1) {
                  if (v1 instanceof Data_Maybe.Just) {
                      return f(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)(v));
                  };
                  throw new Error("Failed pattern match at Data.Array.ST.Iterator line 42, column 5 - line 44, column 47: " + [ v1.constructor.name ]);
              }));
          });
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["next"] = next;
})(PS["Data.Array.ST.Iterator"] = PS["Data.Array.ST.Iterator"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = function (xs) {
      return Control_Monad_ST_Internal.run(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v) {
          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.empty)(function (v1) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterator(function (v2) {
                  return index(xs)(v2);
              }))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Array_ST_Iterator.iterate(v2)(function (v3) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value0)(v)))(function () {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v3.value1)(v1));
                      });
                  }))(function () {
                      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v))(function (v3) {
                          return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST.unsafeFreeze(v1))(function (v4) {
                              return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Data_Tuple.Tuple(v3, v4));
                          });
                      });
                  });
              });
          });
      }));
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($114) {
          return Data_Maybe.maybe([  ])(singleton)(f($114));
      });
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["unzip"] = unzip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["filter"] = $foreign.filter;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.FunctorWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var traverseWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function ($46) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(f(i)($46));
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var forWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
      };
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          return function ($47) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($47));
          };
      };
  }, function (f) {
      return function (z) {
          return function ($48) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($48));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["foldMapWithIndexDefaultR"] = foldMapWithIndexDefaultR;
  exports["traverseWithIndex_"] = traverseWithIndex_;
  exports["forWithIndex_"] = forWithIndex_;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS["Data.FoldableWithIndex"] = PS["Data.FoldableWithIndex"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];                 
  var runFn1 = function (f) {
      return f;
  };
  exports["runFn1"] = runFn1;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";        

  exports.sqrt = Math.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  exports["toNumber"] = $foreign.toNumber;
  exports["pow"] = $foreign.pow;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($155) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($155));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($156) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($156));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 594, column 1 - line 594, column 40: " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 559, column 18 - line 568, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 558, column 3 - line 558, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 193, column 5 - line 193, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 89, column 1 - line 89, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var functorWithIndexMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorMap;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 94, column 1 - line 94, column 59: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 411, column 3 - line 416, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 408, column 1 - line 408, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 447, column 5 - line 452, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 444, column 3 - line 444, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 427, column 3 - line 427, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableMap = new Data_Traversable.Traversable(function () {
      return foldableMap;
  }, function () {
      return functorMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal line 112, column 1 - line 112, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(function ($737) {
                  return Data_Tuple.uncurry(Data_Function.flip(f)($737));
              })(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["values"] = values;
  exports["functorMap"] = functorMap;
  exports["functorWithIndexMap"] = functorWithIndexMap;
  exports["foldableMap"] = foldableMap;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
  exports["traversableMap"] = traversableMap;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var Primitive = {};
  var PrimitiveRecord = {};
  var primitiveString = Primitive;
  var primitiveRecordNil = PrimitiveRecord;
  var primitiveRecordCons = function (dictIsSymbol) {
      return function (dictPrimitive) {
          return function (dictPrimitiveRecord) {
              return function (dictListToRow) {
                  return PrimitiveRecord;
              };
          };
      };
  };
  var primitiveRecord = function (dictRowToList) {
      return function (dictListToRow) {
          return function (dictPrimitiveRecord) {
              return Primitive;
          };
      };
  };                              
  var primitiveInt = Primitive;
  var primitiveBoolean = Primitive;
  var primitiveArray = function (dictPrimitive) {
      return Primitive;
  };
  exports["Primitive"] = Primitive;
  exports["PrimitiveRecord"] = PrimitiveRecord;
  exports["primitiveBoolean"] = primitiveBoolean;
  exports["primitiveInt"] = primitiveInt;
  exports["primitiveString"] = primitiveString;
  exports["primitiveArray"] = primitiveArray;
  exports["primitiveRecordNil"] = primitiveRecordNil;
  exports["primitiveRecordCons"] = primitiveRecordCons;
  exports["primitiveRecord"] = primitiveRecord;
})(PS["Data.Primitive"] = PS["Data.Primitive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  var ListToRow = {};
  var listToRowNil = ListToRow;
  var listToCons = function (dictListToRow) {
      return function (dictCons) {
          return ListToRow;
      };
  };
  exports["RLProxy"] = RLProxy;
  exports["ListToRow"] = ListToRow;
  exports["listToRowNil"] = listToRowNil;
  exports["listToCons"] = listToCons;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var Primitivizable = function (Primitive0, evolve, primitivize) {
      this.Primitive0 = Primitive0;
      this.evolve = evolve;
      this.primitivize = primitivize;
  };
  var PrimitivizableRecord = function (ListToRow0, ListToRow1, evolveRecord, primitivizeRecord) {
      this.ListToRow0 = ListToRow0;
      this.ListToRow1 = ListToRow1;
      this.evolveRecord = evolveRecord;
      this.primitivizeRecord = primitivizeRecord;
  };
  var primitivizeRecord = function (dict) {
      return dict.primitivizeRecord;
  };
  var primitivize = function (dict) {
      return dict.primitivize;
  }; 
  var primitivizableRecordNil = new PrimitivizableRecord(function () {
      return Type_Row.listToRowNil;
  }, function () {
      return Type_Row.listToRowNil;
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var primitivizableInt = new Primitivizable(function () {
      return Data_Primitive.primitiveInt;
  }, function (a) {
      return a;
  }, function (a) {
      return a;
  });
  var evolveRecord = function (dict) {
      return dict.evolveRecord;
  };
  var primitivizableRecord = function (dictRowToList) {
      return function (dictRowToList1) {
          return function (dictPrimitive) {
              return function (dictPrimitivizableRecord) {
                  return new Primitivizable(function () {
                      return dictPrimitive;
                  }, evolveRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value), primitivizeRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value));
              };
          };
      };
  };
  var evolve = function (dict) {
      return dict.evolve;
  };
  var primitivizableArray = function (dictPrimitivizable) {
      return new Primitivizable(function () {
          return Data_Primitive.primitiveArray(dictPrimitivizable.Primitive0());
      }, function (a) {
          return Data_Functor.map(Data_Functor.functorArray)(evolve(dictPrimitivizable))(a);
      }, function (a) {
          return Data_Functor.map(Data_Functor.functorArray)(primitivize(dictPrimitivizable))(a);
      });
  };
  var primitivizableRecordCons = function (dictIsSymbol) {
      return function (dictPrimitivizable) {
          return function (dictPrimitivizableRecord) {
              return function (dictListToRow) {
                  return function (dictListToRow1) {
                      return function (dictCons) {
                          return function (dictCons1) {
                              return new PrimitivizableRecord(function () {
                                  return Type_Row.listToCons(dictListToRow)(dictCons);
                              }, function () {
                                  return Type_Row.listToCons(dictListToRow1)(dictCons1);
                              }, function (v) {
                                  return function (r) {
                                      var tail = evolveRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value)(r);
                                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                      var insert = Record_Unsafe.unsafeSet(key);
                                      var get = Record_Unsafe.unsafeGet(key);
                                      return insert(evolve(dictPrimitivizable)(get(r)))(tail);
                                  };
                              }, function (v) {
                                  return function (r) {
                                      var tail = primitivizeRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value)(r);
                                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                      var insert = Record_Unsafe.unsafeSet(key);
                                      var get = Record_Unsafe.unsafeGet(key);
                                      return insert(primitivize(dictPrimitivizable)(get(r)))(tail);
                                  };
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Primitivizable"] = Primitivizable;
  exports["primitivize"] = primitivize;
  exports["evolve"] = evolve;
  exports["PrimitivizableRecord"] = PrimitivizableRecord;
  exports["primitivizeRecord"] = primitivizeRecord;
  exports["evolveRecord"] = evolveRecord;
  exports["primitivizableInt"] = primitivizableInt;
  exports["primitivizableArray"] = primitivizableArray;
  exports["primitivizableRecordNil"] = primitivizableRecordNil;
  exports["primitivizableRecordCons"] = primitivizableRecordCons;
  exports["primitivizableRecord"] = primitivizableRecord;
})(PS["Data.Primitivizable"] = PS["Data.Primitivizable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var Matrix = (function () {
      function Matrix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Matrix.create = function (value0) {
          return function (value1) {
              return new Matrix(value0, value1);
          };
      };
      return Matrix;
  })();
  var zipWith = function (f) {
      return function (v) {
          return function (v1) {
              var wc = Data_Ord.min(Data_Ord.ordInt)(v.value0)(v1.value0);
              var hc = Data_Ord.min(Data_Ord.ordInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(v.value1))(v.value0))(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(v1.value1))(v1.value0));
              var fc = function (i) {
                  var cy = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(wc);
                  var cx = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(wc);
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(f)(Data_Array.index(v.value1)((cy * v.value0 | 0) + cx | 0)))(Data_Array.index(v1.value1)((cy * v1.value0 | 0) + cx | 0));
              };
              var mc = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(fc)(Data_Array.range(0)((wc * hc | 0) - 1 | 0)));
              return new Matrix(wc, mc);
          };
      };
  };
  var updateAt = function (x) {
      return function (y) {
          return function (a) {
              return function (v) {
                  var $49 = x < v.value0;
                  if ($49) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Matrix.create(v.value0))(Data_Array.updateAt((y * v.value0 | 0) + x | 0)(a)(v.value1));
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var replicate = function (w) {
      return function (h) {
          return function (a) {
              return Matrix.create(w)(Data_Array.replicate(w * h | 0)(a));
          };
      };
  };
  var primitivizableMatrix = function (dictPrimitivizable) {
      return new Data_Primitivizable.Primitivizable(function () {
          return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "values";
          }))(Data_Primitive.primitiveArray(dictPrimitivizable.Primitive0()))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "width";
          }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()));
      }, function (v) {
          return Matrix.create(v.width)(Data_Primitivizable.evolve(Data_Primitivizable.primitivizableArray(dictPrimitivizable))(v.values));
      }, function (v) {
          return {
              width: v.value0,
              values: Data_Primitivizable.primitivize(Data_Primitivizable.primitivizableArray(dictPrimitivizable))(v.value1)
          };
      });
  };
  var index = function (x) {
      return function (y) {
          return function (v) {
              var $71 = 0 <= x && x < v.value0;
              if ($71) {
                  return Data_Array.index(v.value1)((y * v.value0 | 0) + x | 0);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var functorMatrix = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Matrix(m.value0, Data_Functor.map(Data_Functor.functorArray)(f)(m.value1));
      };
  });
  var functorWithIndexMatrix = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorMatrix;
  }, function (f) {
      return function (v) {
          return Matrix.create(v.value0)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
              return f({
                  x: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(v.value0),
                  y: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(v.value0)
              });
          })(v.value1));
      };
  });
  var foldableMatrix = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid)(f)(v.value1);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(b)(v.value1);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(b)(v.value1);
          };
      };
  });
  var traversableMatrix = new Data_Traversable.Traversable(function () {
      return foldableMatrix;
  }, function () {
      return functorMatrix;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Matrix.create(v.value0))(Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)(v.value1));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Matrix.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(f)(v.value1));
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (ma) {
              return function (mb) {
                  return Data_Traversable.sequence(traversableMatrix)(dictApplicative)(zipWith(f)(ma)(mb));
              };
          };
      };
  };
  var filter = function (f) {
      return function (v) {
          return Data_Array.filter(f)(v.value1);
      };
  };
  var empty = new Matrix(0, [  ]);
  var catMaybes = function (v) {
      return Data_Array.catMaybes(v.value1);
  };
  exports["empty"] = empty;
  exports["replicate"] = replicate;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["filter"] = filter;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["catMaybes"] = catMaybes;
  exports["functorMatrix"] = functorMatrix;
  exports["foldableMatrix"] = foldableMatrix;
  exports["traversableMatrix"] = traversableMatrix;
  exports["functorWithIndexMatrix"] = functorWithIndexMatrix;
  exports["primitivizableMatrix"] = primitivizableMatrix;
})(PS["Data.Matrix"] = PS["Data.Matrix"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["error"] = $foreign.error;
  exports["catchException"] = $foreign.catchException;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var functorParAff = new Data_Functor.Functor($foreign._parAffMap);
  var functorAff = new Data_Functor.Functor($foreign._map);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff line 395, column 21 - line 397, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff line 390, column 20 - line 394, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff line 385, column 12 - line 387, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = function ($49) {
      return Data_Functor["void"](Effect.functorEffect)(launchAff($49));
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign._parAffApply);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign._liftEffect);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);                                     
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($51) {
              return Effect_Class.liftEffect(monadEffectAff)(k($51));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign._sequential);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($53) {
      return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($53));
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return go(v.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff line 99, column 7 - line 101, column 22: " + [ v.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var altParAff = new Control_Alt.Alt(function () {
      return functorParAff;
  }, $foreign._parAffAlt);
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
      };
  });
  var plusAff = new Control_Plus.Plus(function () {
      return altAff;
  }, Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")));
  var plusParAff = new Control_Plus.Plus(function () {
      return altParAff;
  }, Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)));
  var alternativeParAff = new Control_Alternative.Alternative(function () {
      return applicativeParAff;
  }, function () {
      return plusParAff;
  });
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["altAff"] = altAff;
  exports["plusAff"] = plusAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["altParAff"] = altParAff;
  exports["plusParAff"] = plusParAff;
  exports["alternativeParAff"] = alternativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.filter = function(fn) {
    return function(seed) {
      return function(sig) {
        var out = make(fn(sig.get()) ? sig.get() : seed);
        sig.subscribe(function(val) { if (fn(val)) out.set(val); });
        return out;
      };
    };
  };

  exports.get = function(sig) {
    return function() {
      return sig.get();
    };
  };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var filterMap = function (f) {
      return function (def) {
          return function (sig) {
              return Data_Functor.map(functorSignal)(Data_Maybe.fromMaybe(def))($foreign.filter(Data_Maybe.isJust)(new Data_Maybe.Just(def))(Data_Functor.map(functorSignal)(f)(sig)));
          };
      };
  };
  exports["filterMap"] = filterMap;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Aff

  exports.mapAffP =
    function mapAffP(runAff_) {
      return function (mkChannel) {
        return function (sendEither) {
          return function (action) {
            return function () {
              return function (sig) {
                var chan = mkChannel();
                var send = sendEither(chan);
                var runAction = runAff_(send);
                sig.subscribe(function (val) {
                  runAction(action(val))();
                });
                return chan;
              };
            };
          };
        };
      };
    };
})(PS["Signal.Aff"] = PS["Signal.Aff"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];                 
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal.Aff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];                 
  var sendEither = function (chan) {
      return Data_Either.either(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(function ($0) {
          return Signal_Channel.send(chan)(Data_Maybe.Just.create($0));
      });
  };
  var mkChannel = Signal_Channel.channel(Data_Maybe.Nothing.value);
  var mapAff = function (action) {
      return $foreign.mapAffP(Effect_Aff.runAff_)(mkChannel)(sendEither)(action);
  };
  exports["mapAff"] = mapAff;
})(PS["Signal.Aff"] = PS["Signal.Aff"] || {});
(function(exports) {// module Signal.Effect

  exports.mapEffectP =
    function mapEffectP(channel) {
      return function (send) {
        return function (action) {
          return function () {
            return function (sig) {
              var initial = action(sig.get());
              var chan = channel(initial)();
              sig.subscribe(function (val) {
                send(chan)(action(val)())();
              });
              return chan;
            };
          };
        };
      };
    };

  exports.foldEffectP = function (make) {
    return function (fun) {
      return function (seed) {
        return function (sig) {
          return function () {
            var acc = seed;
            var out = make(acc);
            sig.subscribe(function (val) {
              acc = fun(val)(acc)();
              out.set(acc);
            });
            return out;
          };
        };
      };
    };
  };
})(PS["Signal.Effect"] = PS["Signal.Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Signal.Effect"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];                 
  var mapEffect = $foreign.mapEffectP(Signal_Channel.channel)(Signal_Channel.send);
  var foldEffect = $foreign.foldEffectP(Signal.constant);
  exports["mapEffect"] = mapEffect;
  exports["foldEffect"] = foldEffect;
})(PS["Signal.Effect"] = PS["Signal.Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Ref = PS["Effect.Ref"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Aff = PS["Signal.Aff"];
  var Signal_Channel = PS["Signal.Channel"];
  var Signal_Effect = PS["Signal.Effect"];                 
  var Machine = (function () {
      function Machine(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Machine.create = function (value0) {
          return function (value1) {
              return new Machine(value0, value1);
          };
      };
      return Machine;
  })();
  var send = function (i) {
      return function (v) {
          return Signal_Channel.send(v.value0)(i);
      };
  };
  var receive = function (v) {
      return function (f) {
          return Data_Functor["void"](Effect.functorEffect)(Data_Functor.flap(Effect.functorEffect)(Signal_Effect.mapEffect(f))(v.value1));
      };
  };
  var machineAff = function (f) {
      return function (is) {
          return function (ii) {
              return function (io) {
                  return function __do() {
                      var v = Effect_Ref["new"](is)();
                      var v1 = Signal_Channel.channel(ii)();
                      var si = Signal_Channel.subscribe(v1);
                      var f$prime = function (i) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(f(i)(v2))(function (v3) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(v3.value1)(v)))(function () {
                                      return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("no output")))(Control_Applicative.pure(Effect_Aff.applicativeAff))(v3.value0);
                                  });
                              });
                          });
                      };
                      return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(Machine.create(v1))(Signal.filterMap(Control_Category.identity(Control_Category.categoryFn))(io)))(Data_Functor.flap(Effect.functorEffect)(Signal_Aff.mapAff(f$prime))(si))();
                  };
              };
          };
      };
  };
  var machine = function (f) {
      return function (is) {
          return function (ii) {
              return function (io) {
                  return function __do() {
                      var v = Signal_Channel.channel(ii)();
                      var v1 = Signal_Channel.channel(io)();
                      var so = Signal_Channel.subscribe(v1);
                      var si = Signal_Channel.subscribe(v);
                      var f$prime = function (i) {
                          return function (s) {
                              return function __do() {
                                  var v2 = f(i)(s)();
                                  return Data_Functor.voidLeft(Effect.functorEffect)(Data_Maybe["maybe'"](Control_Applicative.pure(Effect.applicativeEffect))(Signal_Channel.send(v1))(v2.value0))(v2.value1)();
                              };
                          };
                      };
                      var v2 = Signal_Effect.foldEffect(f$prime)(is)(si)();
                      return new Machine(v, so);
                  };
              };
          };
      };
  };
  var connect = function (v) {
      return function (v1) {
          return function __do() {
              var v2 = Data_Functor.flap(Effect.functorEffect)(Signal_Effect.mapEffect(Signal_Channel.send(v1.value0)))(v.value1)();
              return new Machine(v.value0, v1.value1);
          };
      };
  };
  exports["machine"] = machine;
  exports["machineAff"] = machineAff;
  exports["send"] = send;
  exports["receive"] = receive;
  exports["connect"] = connect;
})(PS["Effect.FSM"] = PS["Effect.FSM"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  exports["randomRange"] = randomRange;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
    "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffectFn4 = function runEffectFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Uncurried"];
  var Effect = PS["Effect"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
  exports["runEffectFn2"] = $foreign.runEffectFn2;
  exports["runEffectFn3"] = $foreign.runEffectFn3;
  exports["runEffectFn4"] = $foreign.runEffectFn4;
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var config = {
      title: "OTHELLO"
  };
  exports["config"] = config;
})(PS["Game.Config"] = PS["Game.Config"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Dark = (function () {
      function Dark() {

      };
      Dark.value = new Dark();
      return Dark;
  })();
  var Light = (function () {
      function Light() {

      };
      Light.value = new Light();
      return Light;
  })();
  var Blank = (function () {
      function Blank() {

      };
      Blank.value = new Blank();
      return Blank;
  })();
  var Off = (function () {
      function Off() {

      };
      Off.value = new Off();
      return Off;
  })();
  var Piece = (function () {
      function Piece(value0) {
          this.value0 = value0;
      };
      Piece.create = function (value0) {
          return new Piece(value0);
      };
      return Piece;
  })();
  var showSide = new Data_Show.Show(function (v) {
      if (v instanceof Dark) {
          return "Dark";
      };
      if (v instanceof Light) {
          return "Light";
      };
      throw new Error("Failed pattern match at Game.Othello.Board line 32, column 1 - line 32, column 30: " + [ v.constructor.name ]);
  });
  var showPiece = new Data_Show.Show(function (v) {
      if (v instanceof Blank) {
          return "Blank";
      };
      if (v instanceof Off) {
          return "Off";
      };
      if (v instanceof Piece) {
          return Data_Show.show(showSide)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Othello.Board line 50, column 1 - line 50, column 32: " + [ v.constructor.name ]);
  });
  var primitivizableSide = new Data_Primitivizable.Primitivizable(function () {
      return Data_Primitive.primitiveString;
  }, function (v) {
      if (v === "Light") {
          return Light.value;
      };
      return Dark.value;
  }, Data_Show.show(showSide));
  var primitivizablePiece = new Data_Primitivizable.Primitivizable(function () {
      return Data_Primitive.primitiveString;
  }, function (v) {
      if (v === "Blank") {
          return Blank.value;
      };
      if (v === "Dark") {
          return new Piece(Dark.value);
      };
      if (v === "Light") {
          return new Piece(Light.value);
      };
      return Off.value;
  }, Data_Show.show(showPiece));
  var getPieceByPos = function (board) {
      return function (pos) {
          return Data_Maybe.fromMaybe(Off.value)(Data_Matrix.index(pos.x)(pos.y)(board));
      };
  };
  var eqSide = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Dark && y instanceof Dark) {
              return true;
          };
          if (x instanceof Light && y instanceof Light) {
              return true;
          };
          return false;
      };
  });
  var isEnemy = function (v) {
      return function (v1) {
          if (v1 instanceof Piece) {
              return Data_Eq.notEq(eqSide)(v)(v1.value0);
          };
          return false;
      };
  };
  var isFriend = function (v) {
      return function (v1) {
          if (v1 instanceof Piece) {
              return Data_Eq.eq(eqSide)(v)(v1.value0);
          };
          return false;
      };
  };
  var ordSide = new Data_Ord.Ord(function () {
      return eqSide;
  }, function (x) {
      return function (y) {
          if (x instanceof Dark && y instanceof Dark) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Dark) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Dark) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Light && y instanceof Light) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Game.Othello.Board line 30, column 8 - line 30, column 35: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqPiece = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Blank && y instanceof Blank) {
              return true;
          };
          if (x instanceof Off && y instanceof Off) {
              return true;
          };
          if (x instanceof Piece && y instanceof Piece) {
              return Data_Eq.eq(eqSide)(x.value0)(y.value0);
          };
          return false;
      };
  });
  var getScore = function (board) {
      return function (side) {
          return Data_Array.length(Data_Matrix.filter(function (v) {
              return Data_Eq.eq(eqPiece)(v)(new Piece(side));
          })(board));
      };
  };
  var enemy = function (v) {
      if (v instanceof Dark) {
          return Light.value;
      };
      if (v instanceof Light) {
          return Dark.value;
      };
      throw new Error("Failed pattern match at Game.Othello.Board line 41, column 1 - line 41, column 20: " + [ v.constructor.name ]);
  };
  var direction = {
      n: function (p) {
          return {
              x: p.x,
              y: p.y - 1 | 0
          };
      },
      ne: function (p) {
          return {
              x: p.x + 1 | 0,
              y: p.y - 1 | 0
          };
      },
      e: function (p) {
          return {
              x: p.x + 1 | 0,
              y: p.y
          };
      },
      se: function (p) {
          return {
              x: p.x + 1 | 0,
              y: p.y + 1 | 0
          };
      },
      s: function (p) {
          return {
              x: p.x,
              y: p.y + 1 | 0
          };
      },
      sw: function (p) {
          return {
              x: p.x - 1 | 0,
              y: p.y + 1 | 0
          };
      },
      w: function (p) {
          return {
              x: p.x - 1 | 0,
              y: p.y
          };
      },
      nw: function (p) {
          return {
              x: p.x - 1 | 0,
              y: p.y - 1 | 0
          };
      }
  };
  var directions = [ direction.n, direction.ne, direction.e, direction.se, direction.s, direction.sw, direction.w, direction.nw ];
  var getFlippablePieces = function (board) {
      return function (side) {
          return function (pos) {
              var getFlippable = function ($copy_dir) {
                  return function ($copy_pos$prime) {
                      return function ($copy_flippable) {
                          var $tco_var_dir = $copy_dir;
                          var $tco_var_pos$prime = $copy_pos$prime;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(dir, pos$prime, flippable) {
                              var pos$prime$prime = dir(pos$prime);
                              var piece = getPieceByPos(board)(pos$prime$prime);
                              var $42 = isEnemy(side)(piece);
                              if ($42) {
                                  $tco_var_dir = dir;
                                  $tco_var_pos$prime = pos$prime$prime;
                                  $copy_flippable = Data_Array.cons(pos$prime$prime)(flippable);
                                  return;
                              };
                              var $43 = isFriend(side)(piece);
                              if ($43) {
                                  $tco_done = true;
                                  return flippable;
                              };
                              $tco_done = true;
                              return [  ];
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_dir, $tco_var_pos$prime, $copy_flippable);
                          };
                          return $tco_result;
                      };
                  };
              };
              var v = getPieceByPos(board)(pos);
              if (v instanceof Off) {
                  return [  ];
              };
              if (v instanceof Piece) {
                  return [  ];
              };
              if (v instanceof Blank) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (f) {
                      return function (dir) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(f)(getFlippable(dir)(pos)([  ]));
                      };
                  })([  ])(directions);
              };
              throw new Error("Failed pattern match at Game.Othello.Board line 125, column 3 - line 128, column 72: " + [ v.constructor.name ]);
          };
      };
  };
  var isMovable = function (board) {
      return function (side) {
          return function (pos) {
              return !Data_Array["null"](getFlippablePieces(board)(side)(pos));
          };
      };
  };
  var maybeMovable = function (board) {
      return function (side) {
          return function (pos) {
              var $46 = isMovable(board)(side)(pos);
              if ($46) {
                  return new Data_Maybe.Just(pos);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var getMovablePos = function (board) {
      return function (side) {
          var f = function (v) {
              return function (v1) {
                  if (v1 instanceof Blank) {
                      return maybeMovable(board)(side)(v);
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
          return Data_Matrix.catMaybes(Data_FunctorWithIndex.mapWithIndex(Data_Matrix.functorWithIndexMatrix)(f)(board));
      };
  };
  var move = function (board) {
      return function (side) {
          return function (pos) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Matrix.updateAt(pos.x)(pos.y)(new Piece(side))(board))(function (v) {
                  var flippable = getFlippablePieces(board)(side)(pos);
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (b) {
                      return function (p) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(b)(Data_Matrix.updateAt(p.x)(p.y)(new Piece(side)));
                      };
                  })(new Data_Maybe.Just(v))(flippable);
              });
          };
      };
  };   
  var blankBoard = Data_Matrix.replicate(8)(8)(Blank.value);
  var initialBoard = (function () {
      var updateAt$prime = function (x) {
          return function (y) {
              return function (a) {
                  return function (m) {
                      return Data_Maybe.fromMaybe(m)(Data_Matrix.updateAt(x)(y)(a)(m));
                  };
              };
          };
      };
      return updateAt$prime(4)(3)(new Piece(Dark.value))(updateAt$prime(3)(4)(new Piece(Dark.value))(updateAt$prime(4)(4)(new Piece(Light.value))(updateAt$prime(3)(3)(new Piece(Light.value))(blankBoard))));
  })();
  exports["Dark"] = Dark;
  exports["Light"] = Light;
  exports["enemy"] = enemy;
  exports["Blank"] = Blank;
  exports["Off"] = Off;
  exports["Piece"] = Piece;
  exports["blankBoard"] = blankBoard;
  exports["initialBoard"] = initialBoard;
  exports["move"] = move;
  exports["getMovablePos"] = getMovablePos;
  exports["getFlippablePieces"] = getFlippablePieces;
  exports["getScore"] = getScore;
  exports["eqSide"] = eqSide;
  exports["ordSide"] = ordSide;
  exports["showSide"] = showSide;
  exports["primitivizableSide"] = primitivizableSide;
  exports["eqPiece"] = eqPiece;
  exports["showPiece"] = showPiece;
  exports["primitivizablePiece"] = primitivizablePiece;
})(PS["Game.Othello.Board"] = PS["Game.Othello.Board"] || {});
(function(exports) {// SimpleWorker

  exports._newWorker = function(url) {
    return new Worker(url);
  };

  exports._request = function(args, callback, worker) {
    worker.onmessage = function(e) {
      callback(e.data)();
    };

    worker.postMessage(args);

    return {};
  };
})(PS["SimpleWorker"] = PS["SimpleWorker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["SimpleWorker"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Primitive = PS["Data.Primitive"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var SimpleWorker = function (Primitive0, Primitive1) {
      this.Primitive0 = Primitive0;
      this.Primitive1 = Primitive1;
  };
  var request = function (dictSimpleWorker) {
      return function (a) {
          return function (w) {
              return Effect_Aff.makeAff(function (f) {
                  return Data_Functor.voidLeft(Effect.functorEffect)(function () {
                      return $foreign._request(a, function ($4) {
                          return f(Data_Either.Right.create($4));
                      }, w);
                  })(Effect_Aff.nonCanceler);
              });
          };
      };
  };
  var newWorker = function (dictSimpleWorker) {
      return Effect_Uncurried.runEffectFn1($foreign._newWorker);
  };
  exports["SimpleWorker"] = SimpleWorker;
  exports["newWorker"] = newWorker;
  exports["request"] = request;
})(PS["SimpleWorker"] = PS["SimpleWorker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];
  var Type_Row = PS["Type.Row"];                 
  var Result = function (x) {
      return x;
  };
  var simpleWorkerAnticipator = new SimpleWorker.SimpleWorker(function () {
      return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "board";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "values";
      }))(Data_Primitive.primitiveArray(Data_Primitive.primitiveString))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "depth";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "side";
      }))(Data_Primitive.primitiveString)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())()));
  }, function () {
      return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "isValid";
      }))(Data_Primitive.primitiveBoolean)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "pos";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()));
  });
  var primitivizableResult = new Data_Primitivizable.Primitivizable(function () {
      return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "isValid";
      }))(Data_Primitive.primitiveBoolean)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "pos";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()));
  }, function (v) {
      if (v.isValid) {
          return Result(new Data_Maybe.Just(v.pos));
      };
      if (!v.isValid) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Game.Computer.Anticipator.Worker line 20, column 1 - line 21, column 73: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Data_Maybe.Just) {
          return {
              isValid: true,
              pos: v.value0
          };
      };
      if (v instanceof Data_Maybe.Nothing) {
          return {
              isValid: false,
              pos: Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "x";
              }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "y";
              }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringInt))(Data_Semiring.semiringInt)))
          };
      };
      throw new Error("Failed pattern match at Game.Computer.Anticipator.Worker line 20, column 1 - line 21, column 73: " + [ v.constructor.name ]);
  });
  var newtypeResult = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Result);
  exports["Result"] = Result;
  exports["newtypeResult"] = newtypeResult;
  exports["primitivizableResult"] = primitivizableResult;
  exports["simpleWorkerAnticipator"] = simpleWorkerAnticipator;
})(PS["Game.Computer.Anticipator.Worker"] = PS["Game.Computer.Anticipator.Worker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Lv1 = (function () {
      function Lv1() {

      };
      Lv1.value = new Lv1();
      return Lv1;
  })();
  var Lv2 = (function () {
      function Lv2() {

      };
      Lv2.value = new Lv2();
      return Lv2;
  })();
  var Lv3 = (function () {
      function Lv3() {

      };
      Lv3.value = new Lv3();
      return Lv3;
  })();
  var Human = (function () {
      function Human() {

      };
      Human.value = new Human();
      return Human;
  })();
  var Com = (function () {
      function Com(value0) {
          this.value0 = value0;
      };
      Com.create = function (value0) {
          return new Com(value0);
      };
      return Com;
  })();
  var showWiseness = new Data_Show.Show(function (v) {
      if (v instanceof Lv1) {
          return "Lv1";
      };
      if (v instanceof Lv2) {
          return "Lv2";
      };
      if (v instanceof Lv3) {
          return "Lv3";
      };
      throw new Error("Failed pattern match at Game.Player.Types line 17, column 1 - line 17, column 38: " + [ v.constructor.name ]);
  });
  var showPlayerType = new Data_Show.Show(function (v) {
      if (v instanceof Human) {
          return "Player";
      };
      if (v instanceof Com) {
          return "Computer " + Data_Show.show(showWiseness)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Player.Types line 29, column 1 - line 29, column 42: " + [ v.constructor.name ]);
  });
  var getShortName = function (v) {
      if (v instanceof Human) {
          return "Player";
      };
      if (v instanceof Com) {
          return "Com. " + Data_Show.show(showWiseness)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Player.Types line 33, column 1 - line 33, column 35: " + [ v.constructor.name ]);
  };
  var eqWiseness = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Lv1 && y instanceof Lv1) {
              return true;
          };
          if (x instanceof Lv2 && y instanceof Lv2) {
              return true;
          };
          if (x instanceof Lv3 && y instanceof Lv3) {
              return true;
          };
          return false;
      };
  });
  var ordWiseness = new Data_Ord.Ord(function () {
      return eqWiseness;
  }, function (x) {
      return function (y) {
          if (x instanceof Lv1 && y instanceof Lv1) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Lv1) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Lv1) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Lv2 && y instanceof Lv2) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Lv2) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Lv2) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Lv3 && y instanceof Lv3) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Game.Player.Types line 15, column 8 - line 15, column 43: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqPlayerType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Human && y instanceof Human) {
              return true;
          };
          if (x instanceof Com && y instanceof Com) {
              return Data_Eq.eq(eqWiseness)(x.value0)(y.value0);
          };
          return false;
      };
  });
  var ordPlayerType = new Data_Ord.Ord(function () {
      return eqPlayerType;
  }, function (x) {
      return function (y) {
          if (x instanceof Human && y instanceof Human) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Human) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Human) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Com && y instanceof Com) {
              return Data_Ord.compare(ordWiseness)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Game.Player.Types line 27, column 8 - line 27, column 47: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["Lv1"] = Lv1;
  exports["Lv2"] = Lv2;
  exports["Lv3"] = Lv3;
  exports["Human"] = Human;
  exports["Com"] = Com;
  exports["getShortName"] = getShortName;
  exports["eqWiseness"] = eqWiseness;
  exports["ordWiseness"] = ordWiseness;
  exports["showWiseness"] = showWiseness;
  exports["eqPlayerType"] = eqPlayerType;
  exports["ordPlayerType"] = ordPlayerType;
  exports["showPlayerType"] = showPlayerType;
})(PS["Game.Player.Types"] = PS["Game.Player.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Map = PS["Data.Map"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Player_Types = PS["Game.Player.Types"];                 
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var Start = (function () {
      function Start(value0) {
          this.value0 = value0;
      };
      Start.create = function (value0) {
          return new Start(value0);
      };
      return Start;
  })();
  var OK = (function () {
      function OK() {

      };
      OK.value = new OK();
      return OK;
  })();
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var Pass = (function () {
      function Pass(value0) {
          this.value0 = value0;
      };
      Pass.create = function (value0) {
          return new Pass(value0);
      };
      return Pass;
  })();
  exports["Init"] = Init;
  exports["Start"] = Start;
  exports["OK"] = OK;
  exports["Move"] = Move;
  exports["Pass"] = Pass;
})(PS["Game.Othello.Message"] = PS["Game.Othello.Message"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Matrix = PS["Data.Matrix"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Phina = PS["Phina"];                 
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var Ready = (function () {
      function Ready(value0) {
          this.value0 = value0;
      };
      Ready.create = function (value0) {
          return new Ready(value0);
      };
      return Ready;
  })();
  var Turn = (function () {
      function Turn(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Turn.create = function (value0) {
          return function (value1) {
              return new Turn(value0, value1);
          };
      };
      return Turn;
  })();
  exports["Init"] = Init;
  exports["Ready"] = Ready;
  exports["Turn"] = Turn;
})(PS["Game.Player.Message"] = PS["Game.Player.Message"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_FSM = PS["Effect.FSM"];
  var Game_Computer_Anticipator_Worker = PS["Game.Computer.Anticipator.Worker"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Othello_Message = PS["Game.Othello.Message"];
  var Game_Player_Message = PS["Game.Player.Message"];
  var Game_Player_Types = PS["Game.Player.Types"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];
  var Type_Row = PS["Type.Row"];                 
  var thinkMove = function (board) {
      return function (state) {
          var getCalcType = function (v) {
              if (v instanceof Game_Player_Types.Lv1) {
                  return 0;
              };
              if (v instanceof Game_Player_Types.Lv2) {
                  return 50;
              };
              if (v instanceof Game_Player_Types.Lv3) {
                  return 250;
              };
              throw new Error("Failed pattern match at Game.Computer line 62, column 5 - line 63, column 5: " + [ v.constructor.name ]);
          };
          var args = {
              board: board,
              side: state.side,
              depth: getCalcType(state.wiseness)
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(SimpleWorker.request(Game_Computer_Anticipator_Worker.simpleWorkerAnticipator)(Data_Primitivizable.primitivize(Data_Primitivizable.primitivizableRecord()()(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "board";
          }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "values";
          }))(Data_Primitive.primitiveArray(Data_Primitive.primitiveString))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "width";
          }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "depth";
          }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "side";
          }))(Data_Primitive.primitiveString)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())))(Data_Primitivizable.primitivizableRecordCons(new Data_Symbol.IsSymbol(function () {
              return "board";
          }))(Data_Matrix.primitivizableMatrix(Game_Othello_Board.primitivizablePiece))(Data_Primitivizable.primitivizableRecordCons(new Data_Symbol.IsSymbol(function () {
              return "depth";
          }))(Data_Primitivizable.primitivizableInt)(Data_Primitivizable.primitivizableRecordCons(new Data_Symbol.IsSymbol(function () {
              return "side";
          }))(Game_Othello_Board.primitivizableSide)(Data_Primitivizable.primitivizableRecordNil)(Type_Row.listToRowNil)(Type_Row.listToRowNil)()())(Type_Row.listToCons(Type_Row.listToRowNil)())(Type_Row.listToCons(Type_Row.listToRowNil)())()())(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())()()))(args))(state.anticipator))(function (v) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Newtype.unwrap(Game_Computer_Anticipator_Worker.newtypeResult)(Data_Primitivizable.evolve(Game_Computer_Anticipator_Worker.primitivizableResult)(v)));
          });
      };
  };
  var think = function (board) {
      return function (state) {
          var pass = Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_Othello_Message.Pass(state.side)), state));
          var move = function (pos) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_Othello_Message.Move(state.side, pos)), state));
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(thinkMove(board)(state))(Data_Maybe.maybe(pass)(move));
      };
  };
  var stepTurn = function (board) {
      return function (side) {
          return function (state) {
              var $5 = Data_Eq.eq(Game_Othello_Board.eqSide)(side)(state.side);
              if ($5) {
                  return think(board)(state);
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
          };
      };
  };
  var newComputer = function (anticipator) {
      return function (wiseness) {
          return function (side) {
              var step = function (v) {
                  return function (state) {
                      if (v instanceof Game_Player_Message.Ready) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(new Data_Maybe.Just(Game_Othello_Message.OK.value), state));
                      };
                      if (v instanceof Game_Player_Message.Turn) {
                          return stepTurn(v.value0)(v.value1)(state);
                      };
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
                  };
              };
              return Effect_FSM.machineAff(step)({
                  wiseness: wiseness,
                  side: side,
                  anticipator: anticipator
              })(Game_Player_Message.Init.value)(Game_Othello_Message.Init.value);
          };
      };
  };
  exports["newComputer"] = newComputer;
})(PS["Game.Computer"] = PS["Game.Computer"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var SubRow = {};
  var subRowInstance = function (dictUnion) {
      return SubRow;
  };
  exports["SubRow"] = SubRow;
  exports["subRowInstance"] = subRowInstance;
})(PS["Phina.Types.Row"] = PS["Phina.Types.Row"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Unsafe

  /* global phina */

  exports._unsafeGetProp = function(label, instance) {
    return instance[label];
  };

  exports._unsafeSetProp = function(label, value, instance) {
    instance[label] = value;
    return instance;
  };

  exports._unsafeSetProps = function(src, dest) {
    var own = Object.prototype.hasOwnProperty;

    for (var key in src) {
      if (own.call(src, key)) {
        dest[key] = src[key];
      }
    }

    return dest;
  };

  exports._unsafeNew = function(module, klass, params) {
    return phina[module][klass](params);
  };
})(PS["Phina.Unsafe"] = PS["Phina.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Unsafe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];                 
  var unsafeSetProps = Effect_Uncurried.runEffectFn2($foreign._unsafeSetProps);
  var unsafeSetProp = Effect_Uncurried.runEffectFn3($foreign._unsafeSetProp);
  var unsafeNew = Effect_Uncurried.runEffectFn3($foreign._unsafeNew);
  var unsafeGetProp = Data_Function_Uncurried.runFn2($foreign._unsafeGetProp);
  exports["unsafeGetProp"] = unsafeGetProp;
  exports["unsafeSetProp"] = unsafeSetProp;
  exports["unsafeSetProps"] = unsafeSetProps;
  exports["unsafeNew"] = unsafeNew;
})(PS["Phina.Unsafe"] = PS["Phina.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Property"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var ReadableAttr = {};
  var WritableAttr = {};
  var HasProperty = {};
  var ReadableProp = {};
  var WritableProp = {};
  var ReadableRL = function (ListToRow1, RowToList0) {
      this.ListToRow1 = ListToRow1;
      this.RowToList0 = RowToList0;
  };
  var WritableRL = function (ListToRow1, RowToList0) {
      this.ListToRow1 = ListToRow1;
      this.RowToList0 = RowToList0;
  };
  var Readable = {};
  var Writable = {};
  var writableRecord = function (dictRowToList) {
      return function (dictListToRow) {
          return function (dictWritableRL) {
              return Writable;
          };
      };
  };
  var writableRLNil = new WritableRL(function () {
      return Type_Row.listToRowNil;
  }, function () {
      return undefined;
  });
  var writableRLCons = function (dictRowToList) {
      return function (dictCons) {
          return function (dictListToRow) {
              return function (dictWritableProp) {
                  return function (dictWritableRL) {
                      return new WritableRL(function () {
                          return Type_Row.listToCons(dictListToRow)(dictCons);
                      }, function () {
                          return dictRowToList;
                      });
                  };
              };
          };
      };
  };
  var writableProp = function (dictHasProperty) {
      return function (dictReadableAttr) {
          return function (dictCons) {
              return function (dictSubRow) {
                  return WritableProp;
              };
          };
      };
  };
  var writableAttrWrite = WritableAttr;
  var writableAttrDash = WritableAttr;
  var toParams = function (dictWritable) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var setProps = function (dictWritable) {
      return Phina_Unsafe.unsafeSetProps;
  };
  var setProp = function (dictIsSymbol) {
      return function (dictWritableProp) {
          return function (s) {
              return Phina_Unsafe.unsafeSetProp(Data_Symbol.reflectSymbol(dictIsSymbol)(s));
          };
      };
  };                                          
  var readableRecord = function (dictRowToList) {
      return function (dictListToRow) {
          return function (dictReadableRL) {
              return Readable;
          };
      };
  };
  var readableRLNil = new ReadableRL(function () {
      return Type_Row.listToRowNil;
  }, function () {
      return undefined;
  });
  var readableRLCons = function (dictRowToList) {
      return function (dictCons) {
          return function (dictListToRow) {
              return function (dictReadableProp) {
                  return function (dictReadableRL) {
                      return new ReadableRL(function () {
                          return Type_Row.listToCons(dictListToRow)(dictCons);
                      }, function () {
                          return dictRowToList;
                      });
                  };
              };
          };
      };
  };
  var readableProp = function (dictHasProperty) {
      return function (dictWritableAttr) {
          return function (dictCons) {
              return function (dictSubRow) {
                  return ReadableProp;
              };
          };
      };
  };
  var readableAttrRead = ReadableAttr;
  var getProps = function (dictReadable) {
      return function ($35) {
          return Control_Applicative.pure(Effect.applicativeEffect)($35);
      };
  };
  var getProp = function (dictIsSymbol) {
      return function (dictReadableProp) {
          return function (s) {
              return function ($36) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Phina_Unsafe.unsafeGetProp(Data_Symbol.reflectSymbol(dictIsSymbol)(s))($36));
              };
          };
      };
  };
  exports["ReadableAttr"] = ReadableAttr;
  exports["WritableAttr"] = WritableAttr;
  exports["HasProperty"] = HasProperty;
  exports["ReadableProp"] = ReadableProp;
  exports["WritableProp"] = WritableProp;
  exports["ReadableRL"] = ReadableRL;
  exports["WritableRL"] = WritableRL;
  exports["Readable"] = Readable;
  exports["Writable"] = Writable;
  exports["getProp"] = getProp;
  exports["getProps"] = getProps;
  exports["setProp"] = setProp;
  exports["setProps"] = setProps;
  exports["toParams"] = toParams;
  exports["readableAttrRead"] = readableAttrRead;
  exports["writableAttrDash"] = writableAttrDash;
  exports["writableAttrWrite"] = writableAttrWrite;
  exports["readableProp"] = readableProp;
  exports["writableProp"] = writableProp;
  exports["readableRLNil"] = readableRLNil;
  exports["readableRLCons"] = readableRLCons;
  exports["writableRLNil"] = writableRLNil;
  exports["writableRLCons"] = writableRLCons;
  exports["readableRecord"] = readableRecord;
  exports["writableRecord"] = writableRecord;
})(PS["Phina.Types.Property"] = PS["Phina.Types.Property"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Phina = PS["Phina"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var setVisible = function (dictWritableProp) {
      return Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
          return "visible";
      }))(dictWritableProp)(Data_Symbol.SProxy.value);
  };
  var setText = function (dictWritableProp) {
      return Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
          return "text";
      }))(dictWritableProp)(Data_Symbol.SProxy.value);
  };
  var setBackgroundColor = function (dictWritableProp) {
      return Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
          return "backgroundColor";
      }))(dictWritableProp)(Data_Symbol.SProxy.value);
  };
  var setAlpha = function (dictWritableProp) {
      return Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
          return "alpha";
      }))(dictWritableProp)(Data_Symbol.SProxy.value);
  };
  var getWidth = function (dictReadableProp) {
      return Phina_Types_Property.getProp(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(dictReadableProp)(Data_Symbol.SProxy.value);
  };
  var getFps = function (dictReadableProp) {
      return Phina_Types_Property.getProp(new Data_Symbol.IsSymbol(function () {
          return "fps";
      }))(dictReadableProp)(Data_Symbol.SProxy.value);
  };
  var getDeltaTime = function (dictReadableProp) {
      return Phina_Types_Property.getProp(new Data_Symbol.IsSymbol(function () {
          return "deltaTime";
      }))(dictReadableProp)(Data_Symbol.SProxy.value);
  };
  exports["getWidth"] = getWidth;
  exports["getFps"] = getFps;
  exports["getDeltaTime"] = getDeltaTime;
  exports["setAlpha"] = setAlpha;
  exports["setBackgroundColor"] = setBackgroundColor;
  exports["setText"] = setText;
  exports["setVisible"] = setVisible;
})(PS["Phina.Accessor"] = PS["Phina.Accessor"] || {});
(function(exports) {

  exports._setLoop = function(flag, tweener) {
    tweener.setLoop(flag);
    return tweener;
  };

  exports._to = function(params, duration, easing, tweener) {
    tweener.to(params, duration, easing);
    return tweener;
  };

  exports._wait = function(time, tweener) {
    tweener.wait(time);
    return tweener;
  };

  exports._call = function(func, tweener) {
    tweener.call(function() {
      return func(tweener.target)();
    });

    return tweener;
  };

  exports._set = function(params, tweener) {
    tweener.set(params);
    return tweener;
  };

  exports._scaleTo = function(scale, duration, easing, tweener) {
    tweener.scaleTo(scale, duration, easing);
    return tweener;
  };

  exports._getTweener = function(element) {
    return element.tweener.clear();
  };

  exports._newTweener = function(element) {
    return phina.accessory.Tweener().attachTo(element).pause();
  };

  exports._play = function(tweener) {
    return tweener.rewind().play();
  };

  exports._stop = function(tweener) {
    return tweener.stop();
  };

  exports._pause = function(tweener) {
    return tweener.pause();
  };

  exports._resume = function(tweener) {
    return tweener.play();
  };
})(PS["Phina.Accessory.Tweener"] = PS["Phina.Accessory.Tweener"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.App.Element

  exports._remove = function(element) {
    return element.remove();
  };

  exports._setUpdater = function(updater, element) {
    element.update = function(ap) {
      updater(ap)(this)();
    };
    return element;
  };

  exports._addChild = function(child, parent) {
    parent.addChild(child);
    return parent;
  };

  exports._addChildTo = function(parent, child) {
    return child.addChildTo(parent);
  };
})(PS["Phina.App.Element"] = PS["Phina.App.Element"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Core.Color

  exports.nullColor = null;
})(PS["Phina.Types.Color"] = PS["Phina.Types.Color"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Color"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var color = Unsafe_Coerce.unsafeCoerce;
  exports["color"] = color;
  exports["nullColor"] = $foreign.nullColor;
})(PS["Phina.Types.Color"] = PS["Phina.Types.Color"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Int = PS["Data.Int"];
  var Prelude = PS["Prelude"];                 
  var Numerical = function (number) {
      this.number = number;
  };
  var numericalNumber = new Numerical(Control_Category.identity(Control_Category.categoryFn));
  var numericalInt = new Numerical(Data_Int.toNumber);
  var number = function (dict) {
      return dict.number;
  };
  exports["Numerical"] = Numerical;
  exports["number"] = number;
  exports["numericalInt"] = numericalInt;
  exports["numericalNumber"] = numericalNumber;
})(PS["Phina.Types.Numerical"] = PS["Phina.Types.Numerical"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Prelude = PS["Prelude"];                 
  var Duration = function (x) {
      return x;
  };
  var toSec = function (v) {
      return v / 1000.0;
  };                                                  
  var sec = function (dictNumerical) {
      return function ($18) {
          return Duration((function (v) {
              return v * 1000.0;
          })(Phina_Types_Numerical.number(dictNumerical)($18)));
      };
  };           
  var msec = function (dictNumerical) {
      return function ($19) {
          return Duration(Phina_Types_Numerical.number(dictNumerical)($19));
      };
  };
  exports["sec"] = sec;
  exports["msec"] = msec;
  exports["toSec"] = toSec;
})(PS["Phina.Types.Duration"] = PS["Phina.Types.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var EventDispatcher = {};
  exports["EventDispatcher"] = EventDispatcher;
})(PS["Phina.Util.EventDispatcher.Class"] = PS["Phina.Util.EventDispatcher.Class"] || {});
(function(exports) {

  exports._getSpan = function(axis, sp, target) {
    return target[axis].span(sp);
  };

  exports._getCenter = function(axis, target) {
    return target[axis].center();
  };

  exports._newGrid = function(width, columns, isLoop, offset) {
    return phina.util.Grid(width, columns, isLoop, offset);
  };

  exports._span = function(index, grid) {
    return grid.span(index);
  };

  exports._unit = function(grid) {
    return grid.unit();
  };
})(PS["Phina.Util.Grid"] = PS["Phina.Util.Grid"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Types.Position

  exports._setPosition = function(pos, a) {
    a.x = pos.x;
    a.y = pos.y;
    return a;
  };
})(PS["Phina.Types.Position"] = PS["Phina.Types.Position"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Position"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var setPosition$prime = function (dictWritable) {
      return function (x) {
          return function (y) {
              return Effect_Uncurried.runEffectFn2($foreign._setPosition)({
                  x: x,
                  y: y
              });
          };
      };
  };
  var setPosition = function (dictWritable) {
      return Effect_Uncurried.runEffectFn2($foreign._setPosition);
  };
  var getPosition = function (dictReadable) {
      return function ($3) {
          return Control_Applicative.pure(Effect.applicativeEffect)($3);
      };
  };
  exports["setPosition"] = setPosition;
  exports["setPosition'"] = setPosition$prime;
  exports["getPosition"] = getPosition;
})(PS["Phina.Types.Position"] = PS["Phina.Types.Position"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Util.Grid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var HasGrid = {};
  var newGrid = Data_Function_Uncurried.runFn4($foreign._newGrid);
  var getUnit = Data_Function_Uncurried.runFn1($foreign._unit);
  var getSpanY = function (dictHasGrid) {
      return Effect_Uncurried.runEffectFn3($foreign._getSpan)("gridY");
  };
  var getSpanX = function (dictHasGrid) {
      return Effect_Uncurried.runEffectFn3($foreign._getSpan)("gridX");
  };
  var getSpanPos = function (dictHasGrid) {
      return function (x) {
          return function (y) {
              return function (t) {
                  return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
                      return function (v1) {
                          return {
                              x: v,
                              y: v1
                          };
                      };
                  })(getSpanX(dictHasGrid)(x)(t)))(getSpanY(dictHasGrid)(y)(t));
              };
          };
      };
  };
  var getSpan = Data_Function_Uncurried.runFn2($foreign._span);
  var getCenterY = function (dictHasGrid) {
      return Effect_Uncurried.runEffectFn2($foreign._getCenter)("gridY");
  };
  var getCenterX = function (dictHasGrid) {
      return Effect_Uncurried.runEffectFn2($foreign._getCenter)("gridX");
  };
  var getCenterPos = function (dictHasGrid) {
      return function (t) {
          return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
              return function (v1) {
                  return {
                      x: v,
                      y: v1
                  };
              };
          })(getCenterX(dictHasGrid)(t)))(getCenterY(dictHasGrid)(t));
      };
  };
  exports["HasGrid"] = HasGrid;
  exports["getSpanX"] = getSpanX;
  exports["getSpanY"] = getSpanY;
  exports["getSpanPos"] = getSpanPos;
  exports["getCenterX"] = getCenterX;
  exports["getCenterY"] = getCenterY;
  exports["getCenterPos"] = getCenterPos;
  exports["newGrid"] = newGrid;
  exports["getSpan"] = getSpan;
  exports["getUnit"] = getUnit;
})(PS["Phina.Util.Grid"] = PS["Phina.Util.Grid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Game.GameApp"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Asset_AssetLoader = PS["Phina.Asset.AssetLoader"];
  var Phina_Input_Keyboard = PS["Phina.Input.Keyboard"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var hasPropertyGameAppReady = Phina_Types_Property.HasProperty;
  var hasPropertyGameApp = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };
  exports["hasPropertyGameAppReady"] = hasPropertyGameAppReady;
  exports["hasPropertyGameApp"] = hasPropertyGameApp;
})(PS["Phina.Game.GameApp"] = PS["Phina.Game.GameApp"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Util.EventDispatcher.Unsafe

  exports._on = function(event, f, instance) {
    return instance.on(event, function(params) {
      return f(params)(this)();
    });
  };
})(PS["Phina.Util.EventDispatcher.Unsafe"] = PS["Phina.Util.EventDispatcher.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];                 
  var unsafeOn = function (dictEventDispatcher) {
      return Effect_Uncurried.runEffectFn3($foreign._on);
  };
  exports["unsafeOn"] = unsafeOn;
})(PS["Phina.Util.EventDispatcher.Unsafe"] = PS["Phina.Util.EventDispatcher.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.App.Element"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];                 
  var IsElement = function (EventDispatcher0) {
      this.EventDispatcher0 = EventDispatcher0;
  };
  var Container = {};
  var setUpdater = function (dictIsElement) {
      return Effect_Uncurried.runEffectFn2($foreign._setUpdater);
  };
  var remove = function (dictIsElement) {
      return Effect_Uncurried.runEffectFn1($foreign._remove);
  };
  var onRemoved = function (dictIsElement) {
      return function (f) {
          return Phina_Util_EventDispatcher_Unsafe.unsafeOn(dictIsElement.EventDispatcher0())("removed")(function (v) {
              return f;
          });
      };
  };
  var hasPropertyElement = Phina_Types_Property.HasProperty;
  var addChildTo = function (dictIsElement) {
      return function (dictContainer) {
          return Effect_Uncurried.runEffectFn2($foreign._addChildTo);
      };
  };
  var addChild = function (dictIsElement) {
      return function (dictContainer) {
          return Effect_Uncurried.runEffectFn2($foreign._addChild);
      };
  };
  exports["IsElement"] = IsElement;
  exports["remove"] = remove;
  exports["setUpdater"] = setUpdater;
  exports["Container"] = Container;
  exports["addChild"] = addChild;
  exports["addChildTo"] = addChildTo;
  exports["onRemoved"] = onRemoved;
  exports["hasPropertyElement"] = hasPropertyElement;
})(PS["Phina.App.Element"] = PS["Phina.App.Element"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var $$Math = PS["Math"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Prelude = PS["Prelude"];                 
  var Angle = function (x) {
      return x;
  }; 
  var deg = function (dictNumerical) {
      return function ($14) {
          return Angle(Phina_Types_Numerical.number(dictNumerical)($14));
      };
  };
  exports["deg"] = deg;
})(PS["Phina.Types.Angle"] = PS["Phina.Types.Angle"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var MonadBuilder = function (Monad1, MonadState0, build, $$eval, make, update) {
      this.Monad1 = Monad1;
      this.MonadState0 = MonadState0;
      this.build = build;
      this["eval"] = $$eval;
      this.make = make;
      this.update = update;
  };
  var update = function (dict) {
      return dict.update;
  };
  var make = function (dict) {
      return dict.make;
  };
  var $$eval = function (dict) {
      return dict["eval"];
  };
  var build = function (dict) {
      return dict.build;
  };
  exports["MonadBuilder"] = MonadBuilder;
  exports["update"] = update;
  exports["eval"] = $$eval;
  exports["build"] = build;
  exports["make"] = make;
})(PS["Phina.Types.Monad.Builder"] = PS["Phina.Types.Monad.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var Builder = function (x) {
      return x;
  };
  var newtypeBuilder = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Builder);
  var monadStateBuilder = Control_Monad_State_Trans.monadStateStateT(Effect.monadEffect);
  var monadBuilderBuilder = new Phina_Types_Monad_Builder.MonadBuilder(function () {
      return Effect.monadEffect;
  }, function () {
      return monadStateBuilder;
  }, function ($3) {
      return Control_Monad_State_Trans.execStateT(Effect.functorEffect)(Data_Newtype.unwrap(newtypeBuilder)($3));
  }, function (f) {
      return Data_Newtype.wrap(newtypeBuilder)(Control_Monad_State_Trans.StateT(function (a) {
          return Data_Functor.mapFlipped(Effect.functorEffect)(f(a))(function (b) {
              return new Data_Tuple.Tuple(b, a);
          });
      }));
  }, function (a) {
      return function (b) {
          return Control_Bind.bind(Effect.bindEffect)(a)(Phina_Types_Monad_Builder.build(monadBuilderBuilder)(b));
      };
  }, function (f) {
      return Data_Newtype.wrap(newtypeBuilder)(Control_Monad_State_Trans.StateT(function (a) {
          return Data_Functor.mapFlipped(Effect.functorEffect)(f(a))(Data_Tuple.Tuple.create(Data_Unit.unit));
      }));
  });
  var monadBuilder = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);
  var monadEffectBuilder = new Effect_Class.MonadEffect(function () {
      return monadBuilder;
  }, function ($4) {
      return Data_Newtype.wrap(newtypeBuilder)(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Effect.monadEffect)($4));
  });                                                                                
  var bindBuilder = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);  
  var applicativeBuilder = Control_Monad_State_Trans.applicativeStateT(Effect.monadEffect);
  exports["newtypeBuilder"] = newtypeBuilder;
  exports["applicativeBuilder"] = applicativeBuilder;
  exports["bindBuilder"] = bindBuilder;
  exports["monadBuilder"] = monadBuilder;
  exports["monadStateBuilder"] = monadStateBuilder;
  exports["monadBuilderBuilder"] = monadBuilderBuilder;
  exports["monadEffectBuilder"] = monadEffectBuilder;
})(PS["Phina.Types.Builder"] = PS["Phina.Types.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Effect = PS["Effect"];                 
  var Playable = function (pause, play, resume, stop) {
      this.pause = pause;
      this.play = play;
      this.resume = resume;
      this.stop = stop;
  };
  var stop = function (dict) {
      return dict.stop;
  };
  var resume = function (dict) {
      return dict.resume;
  };
  var play = function (dict) {
      return dict.play;
  };
  var pause = function (dict) {
      return dict.pause;
  };
  exports["Playable"] = Playable;
  exports["play"] = play;
  exports["stop"] = stop;
  exports["pause"] = pause;
  exports["resume"] = resume;
})(PS["Phina.Types.Playable"] = PS["Phina.Types.Playable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var easeOutSine = "easeOutSine";          
  var easeOutInCubic = "easeOutInCubic";
  var easeOutElastic = "easeOutElastic";
  var easeInSine = "easeInSine";
  var easeInOutSine = "easeInOutSine";
  var easeDefault = "default";
  exports["easeDefault"] = easeDefault;
  exports["easeInOutSine"] = easeInOutSine;
  exports["easeInSine"] = easeInSine;
  exports["easeOutElastic"] = easeOutElastic;
  exports["easeOutInCubic"] = easeOutInCubic;
  exports["easeOutSine"] = easeOutSine;
})(PS["Phina.Util.Tween"] = PS["Phina.Util.Tween"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Accessory.Tweener"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_Types_Angle = PS["Phina.Types.Angle"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Playable = PS["Phina.Types.Playable"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_Tween = PS["Phina.Util.Tween"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var Tweenable = function (IsElement0) {
      this.IsElement0 = IsElement0;
  };
  var wait = function ($4) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn2($foreign._wait)($4));
  };                        
  var to = function (params) {
      return function (duration) {
          return function (easing) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn4($foreign._to)(params)(duration)(easing));
          };
      };
  };
  var setLoop = function ($6) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn2($foreign._setLoop)($6));
  };
  var set = function ($7) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn2($foreign._set)($7));
  };
  var scaleTo = function (scale) {
      return function (duration) {
          return function (easing) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn4($foreign._scaleTo)(scale)(duration)(easing));
          };
      };
  };
  var playableTweener = new Phina_Types_Playable.Playable(Effect_Uncurried.runEffectFn1($foreign._pause), Effect_Uncurried.runEffectFn1($foreign._play), Effect_Uncurried.runEffectFn1($foreign._resume), Effect_Uncurried.runEffectFn1($foreign._stop));
  var newTweener = function (dictTweenable) {
      return Effect_Uncurried.runEffectFn1($foreign._newTweener);
  };
  var getTweener = function (dictTweenable) {
      return Effect_Uncurried.runEffectFn1($foreign._getTweener);
  };                                                                   
  var call = function ($8) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn2($foreign._call)($8));
  };
  var animate = function (dictTweenable) {
      return function (tween) {
          return function (element) {
              return Data_Functor.voidLeft(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(getTweener(dictTweenable)(element))(Phina_Types_Monad_Builder.build(Phina_Types_Builder.monadBuilderBuilder)(tween)))(element);
          };
      };
  };
  var addTween = function (dictTweenable) {
      return function (tween) {
          return function (element) {
              return Control_Bind.bind(Effect.bindEffect)(newTweener(dictTweenable)(element))(Phina_Types_Monad_Builder.build(Phina_Types_Builder.monadBuilderBuilder)(tween));
          };
      };
  };
  exports["Tweenable"] = Tweenable;
  exports["setLoop"] = setLoop;
  exports["to"] = to;
  exports["wait"] = wait;
  exports["call"] = call;
  exports["set"] = set;
  exports["scaleTo"] = scaleTo;
  exports["animate"] = animate;
  exports["addTween"] = addTween;
  exports["playableTweener"] = playableTweener;
})(PS["Phina.Accessory.Tweener"] = PS["Phina.Accessory.Tweener"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Geom.Vector2
  //
  //  Avoid using Vector2 constructor for performance

  /* global phina */

  var vector2 = phina.geom.Vector2;
  var random = phina.util.Random.randfloat.bind(phina.util.Random);

  exports.mulVector2 = function(v) {
    return function(n) {
      return {x: v.x * n, y: v.y * n};
    };
  };

  exports._randomAllVector2 = function(minAngle, maxAngle, minLen, maxLen) {
    return vector2(0, 0).fromDegree(random(minAngle, maxAngle), random(minLen, maxLen));
  };                            
  exports.up = vector2.Up;
})(PS["Phina.Geom.Vector2"] = PS["Phina.Geom.Vector2"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Geom.Vector2"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Angle = PS["Phina.Types.Angle"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Prelude = PS["Prelude"];                 
  var randomAllVector2 = Effect_Uncurried.runEffectFn4($foreign._randomAllVector2);
  var randomVector2 = function (minLen) {
      return function (maxLen) {
          return randomAllVector2(Phina_Types_Angle.deg(Phina_Types_Numerical.numericalInt)(0))(Phina_Types_Angle.deg(Phina_Types_Numerical.numericalInt)(360))(minLen)(maxLen);
      };
  };
  var flipMulVector2 = Data_Function.flip($foreign.mulVector2);
  exports["flipMulVector2"] = flipMulVector2;
  exports["randomAllVector2"] = randomAllVector2;
  exports["randomVector2"] = randomVector2;
  exports["up"] = $foreign.up;
})(PS["Phina.Geom.Vector2"] = PS["Phina.Geom.Vector2"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Geom_Vector2 = PS["Phina.Geom.Vector2"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var Interactive = function (EventDispatcher0) {
      this.EventDispatcher0 = EventDispatcher0;
  };
  var setInteractive = function (dictInteractive) {
      return function (dictWritableProp) {
          return Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
              return "interactive";
          }))(dictWritableProp)(Data_Symbol.SProxy.value);
      };
  };
  var onPointOver = function (dictInteractive) {
      return Phina_Util_EventDispatcher_Unsafe.unsafeOn(dictInteractive.EventDispatcher0())("pointover");
  };
  var onPointOut = function (dictInteractive) {
      return Phina_Util_EventDispatcher_Unsafe.unsafeOn(dictInteractive.EventDispatcher0())("pointout");
  };
  var onPointEnd = function (dictInteractive) {
      return Phina_Util_EventDispatcher_Unsafe.unsafeOn(dictInteractive.EventDispatcher0())("pointend");
  };
  var hasPropertyInteractive = Phina_Types_Property.HasProperty;
  exports["Interactive"] = Interactive;
  exports["onPointOver"] = onPointOver;
  exports["onPointOut"] = onPointOut;
  exports["onPointEnd"] = onPointEnd;
  exports["setInteractive"] = setInteractive;
  exports["hasPropertyInteractive"] = hasPropertyInteractive;
})(PS["Phina.App.Interactive"] = PS["Phina.App.Interactive"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Types.Size

  exports._setSize = function(size, a) {
    a.width = size.width;
    a.height = size.height;
    return a;
  };
})(PS["Phina.Types.Size"] = PS["Phina.Types.Size"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Size"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Property = PS["Phina.Types.Property"];                 
  var setSize = function (dictWritable) {
      return Effect_Uncurried.runEffectFn2($foreign._setSize);
  };
  var hasPropertySize = Phina_Types_Property.HasProperty;
  var getSize = function (dictReadable) {
      return Phina_Types_Property.getProps(dictReadable);
  };
  exports["getSize"] = getSize;
  exports["setSize"] = setSize;
  exports["hasPropertySize"] = hasPropertySize;
})(PS["Phina.Types.Size"] = PS["Phina.Types.Size"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Display.DisplayElement"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Types_Angle = PS["Phina.Types.Angle"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var IsDisplayElement = function (Interactive1, IsElement0) {
      this.Interactive1 = Interactive1;
      this.IsElement0 = IsElement0;
  };
  var unsafeNewDisplayElement = function (params) {
      return function __do() {
          var v = Phina_Unsafe.unsafeNew("display")("DisplayElement")({})();
          return Phina_Unsafe.unsafeSetProps(params)(v)();
      };
  };
  var toDisplayElement = function (dictIsDisplayElement) {
      return Unsafe_Coerce.unsafeCoerce;
  };                                                    
  var newDisplayElement = function (dictWritable) {
      return unsafeNewDisplayElement;
  };
  var hasPropertyDisplayElementProps = function (dictHasProperty) {
      return function (dictHasProperty1) {
          return function (dictHasProperty2) {
              return function (dictUnion) {
                  return function (dictUnion1) {
                      return function (dictUnion2) {
                          return Phina_Types_Property.HasProperty;
                      };
                  };
              };
          };
      };
  };
  var hasPropertyDisplayElement = function (dictHasProperty) {
      return Phina_Types_Property.HasProperty;
  };                                                                                                              
  var edDisplayElement = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var isElementDisplayElement = new Phina_App_Element.IsElement(function () {
      return edDisplayElement;
  });
  var containerDisplayElement = Phina_App_Element.Container;
  exports["IsDisplayElement"] = IsDisplayElement;
  exports["newDisplayElement"] = newDisplayElement;
  exports["toDisplayElement"] = toDisplayElement;
  exports["hasPropertyDisplayElementProps"] = hasPropertyDisplayElementProps;
  exports["hasPropertyDisplayElement"] = hasPropertyDisplayElement;
  exports["edDisplayElement"] = edDisplayElement;
  exports["isElementDisplayElement"] = isElementDisplayElement;
  exports["containerDisplayElement"] = containerDisplayElement;
})(PS["Phina.Display.DisplayElement"] = PS["Phina.Display.DisplayElement"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Effect = PS["Effect"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];                 
  var IsShape = function (IsDisplayElement0, shape) {
      this.IsDisplayElement0 = IsDisplayElement0;
      this.shape = shape;
  };
  var shape = function (dict) {
      return dict.shape;
  };
  var unsafeNewShape = function (dictIsShape) {
      return function (params) {
          return function __do() {
              var v = Phina_Unsafe.unsafeNew("display")(shape(dictIsShape)(Type_Proxy["Proxy"].value))({})();
              return Phina_Unsafe.unsafeSetProps(params)(v)();
          };
      };
  };
  var newShape = function (dictIsShape) {
      return function (dictWritable) {
          return unsafeNewShape(dictIsShape);
      };
  };
  var hasPropertyShape = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };
  exports["IsShape"] = IsShape;
  exports["shape"] = shape;
  exports["newShape"] = newShape;
  exports["hasPropertyShape"] = hasPropertyShape;
})(PS["Phina.Display.Shape"] = PS["Phina.Display.Shape"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Effect = PS["Effect"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];                 
  var hasPropertyCircleShape = function (dictHasProperty) {
      return Phina_Types_Property.HasProperty;
  };                                                             
  var edCircleShape = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveCircleShape = new Phina_App_Interactive.Interactive(function () {
      return edCircleShape;
  });
  var isElementCircleShape = new Phina_App_Element.IsElement(function () {
      return edCircleShape;
  });
  var isDeCircleShape = new Phina_Display_DisplayElement.IsDisplayElement(function () {
      return interactiveCircleShape;
  }, function () {
      return isElementCircleShape;
  });
  var isShapeCircleShape = new Phina_Display_Shape.IsShape(function () {
      return isDeCircleShape;
  }, function (v) {
      return "CircleShape";
  });
  var newCircleShape = function (dictWritable) {
      return Phina_Display_Shape.newShape(isShapeCircleShape)(dictWritable);
  };                                                                              
  var tweenableCircleShape = new Phina_Accessory_Tweener.Tweenable(function () {
      return isElementCircleShape;
  });
  var containerCircleShape = Phina_App_Element.Container;
  exports["newCircleShape"] = newCircleShape;
  exports["hasPropertyCircleShape"] = hasPropertyCircleShape;
  exports["isShapeCircleShape"] = isShapeCircleShape;
  exports["edCircleShape"] = edCircleShape;
  exports["isElementCircleShape"] = isElementCircleShape;
  exports["containerCircleShape"] = containerCircleShape;
  exports["isDeCircleShape"] = isDeCircleShape;
  exports["interactiveCircleShape"] = interactiveCircleShape;
  exports["tweenableCircleShape"] = tweenableCircleShape;
})(PS["Phina.Display.CircleShape"] = PS["Phina.Display.CircleShape"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Display.DisplayScene

  /* global phina */

  var exit = function(params) {
    return function(scene) {
      return function() {
        scene.exit(params);
        return scene;
      };
    };
  };

  exports.exit = exit;

  exports._popup = function(s, params, scene) {
    var klass;

    if ((klass = getClass(s.baseClass)) == null) {
      if ((klass = phina.display[s.baseClass]) == null) {
        if ((klass = phina.game[s.baseClass]) == null) {
          throw Error('Scene ' + s.baseClass + ' is not found.');
        }
      }
    }

    return function(callback) {
      return function() {
        var func = function() {
          scene.one('resume', function(r) {
            callback(r.prevScene.nextArguments)();
          });

          var sceneParams = {};

          if (scene['scene params'] != null) {
            copyProps(scene['scene params'], sceneParams);
          }
          copyProps(params, sceneParams);

          var newScene = klass(sceneParams);
          newScene['scene params'] = sceneParams;

          scene.app.pushScene(s.setup(params)(exit)(newScene)());

          // Forced rendering for dirty shapes
          renderShapes(newScene, scene.app);

          return;
        };

        scene.app != null ? func() : scene.on('enter', func);

        return {};
      };
    };
  };

  var getClass = function(path) {
    return path.split(/[,./ ]|::/).reduce(
      function(c, a) {
        return c != null ? c[a] : null;
      },
      phina.global
    );
  };

  var copyProps = function(src, dest) {
    var own = Object.prototype.hasOwnProperty;

    for (var key in src) {
      if (own.call(src, key)) {
        dest[key] = src[key];
      }
    }

    return dest;
  };

  var renderShapes = function(element, app) {
    if (element instanceof phina.display.Shape) {
      element.flare('enterframe', {app: app});
    }

    element.children && element.children.forEach(function(c) {
      renderShapes(c, app);
    });
  };
})(PS["Phina.Display.DisplayScene"] = PS["Phina.Display.DisplayScene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var Async = function (x) {
      return x;
  };                                                                                            
  var newtypeAsync = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Async);                                                                                 
  var monadStateAsync = Control_Monad_State_Trans.monadStateStateT(Effect_Aff.monadAff);     
  var monadAsync = Control_Monad_State_Trans.monadStateT(Effect_Aff.monadAff);
  var monadEffectAsync = new Effect_Class.MonadEffect(function () {
      return monadAsync;
  }, function ($4) {
      return Data_Newtype.wrap(newtypeAsync)(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($4)));
  });
  var makeAsync = function (f) {
      return Data_Newtype.wrap(newtypeAsync)(function (a) {
          return Effect_Aff.makeAff(function (cb) {
              return f(a)(function (r) {
                  return cb(Data_Functor.map(Data_Either.functorEither)(function (b) {
                      return new Data_Tuple.Tuple(b, a);
                  })(r));
              });
          });
      });
  };
  var makeAsync$prime = function (f) {
      return makeAsync(function (a) {
          return function (cb) {
              return function __do() {
                  Effect_Exception.catchException(function ($5) {
                      return cb(Data_Either.Left.create($5));
                  })(f(a)(function ($6) {
                      return cb(Data_Either.Right.create($6));
                  }))();
                  return Effect_Aff.nonCanceler;
              };
          };
      });
  };
  var liftBuilder = function ($7) {
      return Data_Newtype.wrap(newtypeAsync)(Control_Monad_State_Trans.mapStateT(Effect_Class.liftEffect(Effect_Aff.monadEffectAff))(Data_Newtype.unwrap(Phina_Types_Builder.newtypeBuilder)($7)));
  };                                                   
  var launchAsync$prime = function (b) {
      return function (a) {
          return Data_Functor.voidRight(Effect.functorEffect)(a)(Effect_Aff.launchAff_(Control_Monad_State_Trans.evalStateT(Effect_Aff.functorAff)(Data_Newtype.unwrap(newtypeAsync)(b))(a)));
      };
  };
  var monadBuilderAsync = new Phina_Types_Monad_Builder.MonadBuilder(function () {
      return Effect_Aff.monadAff;
  }, function () {
      return monadStateAsync;
  }, function ($9) {
      return Control_Monad_State_Trans.execStateT(Effect_Aff.functorAff)(Data_Newtype.unwrap(newtypeAsync)($9));
  }, function ($10) {
      return liftBuilder(Phina_Types_Monad_Builder["eval"](Phina_Types_Builder.monadBuilderBuilder)($10));
  }, function (a) {
      return function (b) {
          return Control_Bind.bind(Effect.bindEffect)(Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(a))(launchAsync$prime(b));
      };
  }, function ($11) {
      return liftBuilder(Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)($11));
  });
  var functorAsync = Control_Monad_State_Trans.functorStateT(Effect_Aff.functorAff);
  var foreverAsync = function (as) {
      return Async(function (a) {
          return Data_Functor.voidRight(Effect_Aff.functorAff)(new Data_Tuple.Tuple(Data_Unit.unit, a))(Control_Monad_Rec_Class.forever(Effect_Aff.monadRecAff)(Phina_Types_Monad_Builder.build(monadBuilderAsync)(as)(a)));
      });
  };
  var bindAsync = Control_Monad_State_Trans.bindStateT(Effect_Aff.monadAff);
  exports["makeAsync"] = makeAsync;
  exports["makeAsync'"] = makeAsync$prime;
  exports["launchAsync'"] = launchAsync$prime;
  exports["liftBuilder"] = liftBuilder;
  exports["foreverAsync"] = foreverAsync;
  exports["newtypeAsync"] = newtypeAsync;
  exports["functorAsync"] = functorAsync;
  exports["bindAsync"] = bindAsync;
  exports["monadAsync"] = monadAsync;
  exports["monadStateAsync"] = monadStateAsync;
  exports["monadBuilderAsync"] = monadBuilderAsync;
  exports["monadEffectAsync"] = monadEffectAsync;
})(PS["Phina.Types.Async"] = PS["Phina.Types.Async"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Display.DisplayScene"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Input_Keyboard = PS["Phina.Input.Keyboard"];
  var Phina_Types_Async = PS["Phina.Types.Async"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var IsScene = function (Container2, EventDispatcher0, HasGrid3, Interactive4, IsElement1, className) {
      this.Container2 = Container2;
      this.EventDispatcher0 = EventDispatcher0;
      this.HasGrid3 = HasGrid3;
      this.Interactive4 = Interactive4;
      this.IsElement1 = IsElement1;
      this.className = className;
  };
  var toSceneHandle = Unsafe_Coerce.unsafeCoerce;
  var hasPropertySceneProps = function (dictHasProperty) {
      return function (dictHasProperty1) {
          return function (dictHasProperty2) {
              return function (dictUnion) {
                  return function (dictUnion1) {
                      return function (dictUnion2) {
                          return Phina_Types_Property.HasProperty;
                      };
                  };
              };
          };
      };
  };
  var hasPropertyDisplayScene = function (dictHasProperty) {
      return Phina_Types_Property.HasProperty;
  };
  var hasGridDisplayScene = Phina_Util_Grid.HasGrid;
  var edDisplayScene = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveDisplayScene = new Phina_App_Interactive.Interactive(function () {
      return edDisplayScene;
  });
  var isElementDisplayScene = new Phina_App_Element.IsElement(function () {
      return edDisplayScene;
  });
  var containerDisplayScene = Phina_App_Element.Container;
  var isSceneDisplayScene = new IsScene(function () {
      return containerDisplayScene;
  }, function () {
      return edDisplayScene;
  }, function () {
      return hasGridDisplayScene;
  }, function () {
      return interactiveDisplayScene;
  }, function () {
      return isElementDisplayScene;
  }, function (v) {
      return "DisplayScene";
  });
  var className = function (dict) {
      return dict.className;
  };
  var popup = function (dictIsScene) {
      return function (dictIsScene1) {
          return function (h) {
              return function ($23) {
                  return Phina_Types_Async["makeAsync'"](Data_Function_Uncurried.runFn3($foreign._popup)({
                      baseClass: className(dictIsScene)(Type_Proxy["Proxy"].value),
                      setup: h
                  })($23));
              };
          };
      };
  };
  exports["IsScene"] = IsScene;
  exports["className"] = className;
  exports["toSceneHandle"] = toSceneHandle;
  exports["popup"] = popup;
  exports["hasPropertySceneProps"] = hasPropertySceneProps;
  exports["hasPropertyDisplayScene"] = hasPropertyDisplayScene;
  exports["edDisplayScene"] = edDisplayScene;
  exports["isElementDisplayScene"] = isElementDisplayScene;
  exports["containerDisplayScene"] = containerDisplayScene;
  exports["hasGridDisplayScene"] = hasGridDisplayScene;
  exports["interactiveDisplayScene"] = interactiveDisplayScene;
  exports["isSceneDisplayScene"] = isSceneDisplayScene;
  exports["exit"] = $foreign.exit;
})(PS["Phina.Display.DisplayScene"] = PS["Phina.Display.DisplayScene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var hasPropertyLabel = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };
  var setText = Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
      return "text";
  }))(Phina_Types_Property.writableProp(hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Data_Symbol.SProxy.value);
  var edLabel = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveLabel = new Phina_App_Interactive.Interactive(function () {
      return edLabel;
  });
  var isElementLabel = new Phina_App_Element.IsElement(function () {
      return edLabel;
  });
  var isDeLabel = new Phina_Display_DisplayElement.IsDisplayElement(function () {
      return interactiveLabel;
  }, function () {
      return isElementLabel;
  });
  var isShapeLabel = new Phina_Display_Shape.IsShape(function () {
      return isDeLabel;
  }, function (v) {
      return "Label";
  });
  var newLabel = function (dictWritable) {
      return Phina_Display_Shape.newShape(isShapeLabel)(dictWritable);
  };                                                                  
  var tweenableLabel = new Phina_Accessory_Tweener.Tweenable(function () {
      return isElementLabel;
  });
  exports["newLabel"] = newLabel;
  exports["setText"] = setText;
  exports["hasPropertyLabel"] = hasPropertyLabel;
  exports["isShapeLabel"] = isShapeLabel;
  exports["edLabel"] = edLabel;
  exports["isElementLabel"] = isElementLabel;
  exports["isDeLabel"] = isDeLabel;
  exports["interactiveLabel"] = interactiveLabel;
  exports["tweenableLabel"] = tweenableLabel;
})(PS["Phina.Display.Label"] = PS["Phina.Display.Label"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Game_Config = PS["Game.Config"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Phina = PS["Phina"];
  var Phina_Accessor = PS["Phina.Accessor"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_CircleShape = PS["Phina.Display.CircleShape"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Phina_Types_Playable = PS["Phina.Types.Playable"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Phina_Util_Tween = PS["Phina.Util.Tween"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var turnAnimation = function (f) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.setLoop(true))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
              scaleX: -1.0
          }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(500))(Phina_Util_Tween.easeInOutSine))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                  scaleX: 1.0
              }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(500))(Phina_Util_Tween.easeInOutSine))(function () {
                  return Phina_Accessory_Tweener.call(f);
              });
          });
      });
  };
  var pieceColor = function (v) {
      if (v instanceof Game_Othello_Board.Dark) {
          return Phina_Types_Color.color("#222");
      };
      if (v instanceof Game_Othello_Board.Light) {
          return Phina_Types_Color.color("#ddd");
      };
      throw new Error("Failed pattern match at Game.Style line 221, column 1 - line 221, column 26: " + [ v.constructor.name ]);
  };
  var suggestAnimation = function (side) {
      return function (icon) {
          var animation = Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.setLoop(true))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.wait(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                      scaleX: 0.0
                  }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeInSine))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                          fill: pieceColor(side)
                      })))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                              scaleX: 1.0
                          }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeOutSine))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                  scaleX: 0.0
                              }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeInSine))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                      fill: pieceColor(Game_Othello_Board.enemy(side))
                                  })))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                          scaleX: 1.0
                                      }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeOutSine))(function () {
                                          return Phina_Accessory_Tweener.wait(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250));
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
          return Data_Functor.map(Effect.functorEffect)(function (v) {
              return {
                  play: Data_Functor["void"](Effect.functorEffect)(Phina_Types_Playable.play(Phina_Accessory_Tweener.playableTweener)(v)),
                  stop: Data_Functor.voidLeft(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(Phina_Types_Playable.stop(Phina_Accessory_Tweener.playableTweener)(v))(Phina_Types_Property.setProps(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))({
                      scaleX: 1.0,
                      fill: pieceColor(Game_Othello_Board.enemy(side))
                  })(icon)))(Data_Unit.unit)
              };
          })(Phina_Accessory_Tweener.addTween(Phina_Display_CircleShape.tweenableCircleShape)(animation)(icon));
      };
  };
  var passAnimation = function (width) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
              x: width + 200.0
          })))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.call(Phina_Accessor.setVisible(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(true)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                      x: -200.0
                  }))(Phina_Types_Duration.sec(Phina_Types_Numerical.numericalInt)(2))(Phina_Util_Tween.easeOutInCubic))(function () {
                      return Phina_Accessory_Tweener.call(function (a) {
                          return Data_Functor.voidLeft(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(Phina_App_Element.remove(Phina_Display_Label.isElementLabel)(a))(f))(a);
                      });
                  });
              });
          });
      };
  };
  var layout = {
      titleScene: {
          title: Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(8)(3),
          settingPanel: Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(8)(9),
          startButton: Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(8)(13)
      },
      mainScene: {
          nameLabel: function (v) {
              if (v instanceof Game_Othello_Board.Dark) {
                  return Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(4)(1);
              };
              if (v instanceof Game_Othello_Board.Light) {
                  return Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(12)(1);
              };
              throw new Error("Failed pattern match at Game.Style line 25, column 20 - line 27, column 43: " + [ v.constructor.name ]);
          },
          scoreDigit: function (side) {
              return function (digit) {
                  return function ($14) {
                      return Data_Functor.map(Effect.functorEffect)(function (v) {
                          return Data_Semiring.add(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                              return "x";
                          }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                              return "y";
                          }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(v)({
                              x: 44.0 * (0.5 - Data_Int.toNumber(digit)),
                              y: 0.0
                          });
                      })((function () {
                          if (side instanceof Game_Othello_Board.Dark) {
                              return Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(4)(2);
                          };
                          if (side instanceof Game_Othello_Board.Light) {
                              return Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(12)(2);
                          };
                          throw new Error("Failed pattern match at Game.Style line 31, column 21 - line 33, column 51: " + [ side.constructor.name ]);
                      })()($14));
                  };
              };
          },
          board: Phina_Util_Grid.getSpanPos(Phina_Display_DisplayScene.hasGridDisplayScene)(8)(9)
      }
  };
  var flipAnimation = function (dist) {
      return function (side) {
          return function (f) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.wait(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalNumber)(dist * 250.0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                      scaleX: 0.0
                  }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeInSine))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                          fill: pieceColor(side)
                      })))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                              scaleX: 1.0
                          }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeOutSine))(function () {
                              return Phina_Accessory_Tweener.call(function (a) {
                                  return Data_Functor.voidLeft(Effect.functorEffect)(f)(a);
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  var finishAnimation = function (f) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))({
          scaleX: 0.5,
          scaleY: 0.0
      })))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.call(Phina_Accessor.setVisible(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(true)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                  scaleY: 0.5
              }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(100))(Phina_Util_Tween.easeOutSine))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                      scaleY: -0.5
                  }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                          scaleY: 0.5
                      }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                              scaleY: -0.5
                          }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                  scaleY: 0.5
                              }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                      scaleY: -0.5
                                  }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                          scaleY: 0.5
                                      }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                              scaleY: -0.5
                                          }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                                  scaleY: 0.5
                                              }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutSine))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.scaleTo(1.0)(Phina_Types_Duration.sec(Phina_Types_Numerical.numericalInt)(1))(Phina_Util_Tween.easeOutElastic))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.wait(Phina_Types_Duration.sec(Phina_Types_Numerical.numericalInt)(1)))(function () {
                                                          return Phina_Accessory_Tweener.call(function (a) {
                                                              return Data_Functor.voidLeft(Effect.functorEffect)(Control_Apply.applySecond(Effect.applyEffect)(Phina_App_Element.remove(Phina_Display_Label.isElementLabel)(a))(f))(a);
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var digitAnimation = function (text) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
          scaleY: 0.0
      }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeInSine))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.call(Phina_Display_Label.setText(text)))(function () {
              return Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                  scaleY: 1.0
              }))(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(250))(Phina_Util_Tween.easeOutSine);
          });
      });
  };
  var bgPieceAnimation = function (fluctuation) {
      var duration = Phina_Types_Duration.msec(Phina_Types_Numerical.numericalNumber)(250.0 * fluctuation);
      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.setLoop(true))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
              scaleX: 0.0
          }))(duration)(Phina_Util_Tween.easeInSine))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                  fill: pieceColor(Game_Othello_Board.Light.value)
              })))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                      scaleX: 1.0
                  }))(duration)(Phina_Util_Tween.easeOutSine))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                          scaleX: 0.0
                      }))(duration)(Phina_Util_Tween.easeInSine))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.set(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                              fill: pieceColor(Game_Othello_Board.Dark.value)
                          })))(function () {
                              return Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                                  scaleX: 1.0
                              }))(duration)(Phina_Util_Tween.easeOutSine);
                          });
                      });
                  });
              });
          });
      });
  };
  var style = {
      titleScene: {
          backgroundColor: Phina_Types_Color.color("#393")
      },
      title: {
          text: Game_Config.config.title,
          fontSize: 98.0,
          fontWeight: "bold",
          fill: Phina_Types_Color.color("white"),
          stroke: Phina_Types_Color.color("black"),
          strokeWidth: 4.0
      },
      settingPanel: {
          width: 520.0,
          height: 280.0
      },
      selectButton: function (v) {
          return {
              width: v.width - 16.0,
              height: v.height - 8.0,
              cornerRadius: (v.height - 8.0) / 2.0,
              stroke: Phina_Types_Color.color("grey"),
              strokeWidth: 4.0,
              fontSize: 24.0
          };
      },
      selectButtonOn: function (v) {
          if (v instanceof Game_Othello_Board.Dark) {
              return {
                  fill: pieceColor(Game_Othello_Board.Dark.value),
                  fontColor: pieceColor(Game_Othello_Board.Light.value)
              };
          };
          if (v instanceof Game_Othello_Board.Light) {
              return {
                  fill: pieceColor(Game_Othello_Board.Light.value),
                  fontColor: pieceColor(Game_Othello_Board.Dark.value)
              };
          };
          throw new Error("Failed pattern match at Game.Style line 66, column 21 - line 74, column 10: " + [ v.constructor.name ]);
      },
      selectButtonOff: {
          fill: Phina_Types_Color.color("#666"),
          fontColor: Phina_Types_Color.color("#aaa")
      },
      startButton: {
          width: 320.0,
          height: 72.0,
          cornerRadius: 36.0,
          fill: Phina_Types_Color.color("#37d"),
          stroke: Phina_Types_Color.color("white"),
          strokeWidth: 6.0,
          text: "Game Start",
          fontColor: Phina_Types_Color.color("white"),
          fontSize: 40.0
      },
      startButtonPushed: {
          fill: Phina_Types_Color.color("#7bf"),
          stroke: Phina_Types_Color.nullColor,
          shadow: Phina_Types_Color.color("#7bf"),
          shadowBlur: 8.0
      },
      bgPiecesStage: {
          fill: Phina_Types_Color.color("transparent"),
          padding: 0.0,
          stroke: Phina_Types_Color.nullColor,
          alpha: 0.9
      },
      bgPiece: {
          width: 80.0,
          num: 16,
          speed: 320.0,
          splashSpeed: 1200.0
      },
      bgPieceAnimation: bgPieceAnimation,
      stage: {
          fill: Phina_Types_Color.color("#e72"),
          padding: 0.0,
          originX: 0.0,
          originY: 0.0,
          stroke: Phina_Types_Color.nullColor,
          alpha: 0.0
      },
      board: function (width) {
          var boardWidth = width - 24.0 * 2.0;
          return {
              width: boardWidth,
              height: boardWidth,
              padding: 16.0,
              fill: Phina_Types_Color.color("#393"),
              stroke: Phina_Types_Color.color("#333"),
              strokeWidth: 4.0,
              shadow: Phina_Types_Color.color("black"),
              shadowBlur: 16.0
          };
      },
      cell: function (width) {
          var cellWidth = width - 2.0;
          return {
              width: cellWidth,
              height: cellWidth,
              fill: Phina_Types_Color.color("transparent"),
              padding: 2.0 / 2.0,
              stroke: Phina_Types_Color.color("#444"),
              strokeWidth: 2.0
          };
      },
      piece: function (width) {
          return function (side) {
              return {
                  radius: width / 2.0 - 8.0,
                  fill: pieceColor(side),
                  stroke: Phina_Types_Color.color("#999"),
                  strokeWidth: 4.0,
                  shadow: Phina_Types_Color.color("black"),
                  shadowBlur: 8.0
              };
          };
      },
      pieceColor: pieceColor,
      nameLabel: function (side) {
          return function (name) {
              return {
                  text: name,
                  fill: pieceColor(side),
                  fontSize: 30.0,
                  fontWeight: "bold",
                  stroke: Phina_Types_Color.color("grey"),
                  strokeWidth: 2.0
              };
          };
      },
      turnAnimation: turnAnimation,
      digit: function (side) {
          return function (digit) {
              return {
                  fill: pieceColor(side),
                  fontSize: 52.0,
                  fontWeight: "bold",
                  stroke: Phina_Types_Color.color("grey"),
                  strokeWidth: 2.0
              };
          };
      },
      digitAnimation: digitAnimation,
      suggestMask: function (width) {
          return {
              radius: width / 2.0 - 4.0,
              fill: Phina_Types_Color.color("#393"),
              stroke: Phina_Types_Color.nullColor
          };
      },
      suggestAnimation: suggestAnimation,
      movableIconAlpha: 0.25,
      flipAnimation: flipAnimation,
      passLabel: {
          text: "Pass !",
          fill: Phina_Types_Color.color("white"),
          fontSize: 72.0,
          fontWeight: "bold",
          stroke: Phina_Types_Color.color("black"),
          strokeWidth: 6.0,
          padding: 24.0,
          shadow: Phina_Types_Color.color("black"),
          shadowBlur: 24.0,
          visible: false
      },
      passAnimation: passAnimation,
      finishLabel: {
          text: "Finish !",
          fill: Phina_Types_Color.color("white"),
          fontSize: 120.0,
          fontWeight: "bold",
          stroke: Phina_Types_Color.color("black"),
          strokeWidth: 8.0,
          padding: 32.0,
          shadow: Phina_Types_Color.color("black"),
          shadowBlur: 32.0,
          visible: false
      },
      finishAnimation: finishAnimation,
      sceneTransitionTime: 0.5,
      resultSceneAlpha: 0.7
  };
  exports["layout"] = layout;
  exports["style"] = style;
})(PS["Game.Style"] = PS["Game.Style"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];
  var setUpdaterB = function (dictIsElement) {
      return function ($13) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_App_Element.setUpdater(dictIsElement)($13));
      };
  };
  var addChildToB = function (dictIsElement) {
      return function (dictContainer) {
          return function ($17) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_App_Element.addChildTo(dictIsElement)(dictContainer)($17));
          };
      };
  };
  var addChildB = function (dictIsElement) {
      return function (dictContainer) {
          return function ($18) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_App_Element.addChild(dictIsElement)(dictContainer)($18));
          };
      };
  };
  exports["setUpdaterB"] = setUpdaterB;
  exports["addChildB"] = addChildB;
  exports["addChildToB"] = addChildToB;
})(PS["Phina.App.Element.Builder"] = PS["Phina.App.Element.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect = PS["Effect"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];                 
  var setInteractiveB = function (dictInteractive) {
      return function (dictWritableProp) {
          return function ($10) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_App_Interactive.setInteractive(dictInteractive)(dictWritableProp)($10));
          };
      };
  };
  exports["setInteractiveB"] = setInteractiveB;
})(PS["Phina.App.Interactive.Builder"] = PS["Phina.App.Interactive.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_FSM = PS["Effect.FSM"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Othello_Message = PS["Game.Othello.Message"];
  var Game_Player_Message = PS["Game.Player.Message"];
  var Game_Style = PS["Game.Style"];
  var Phina = PS["Phina"];
  var Phina_Accessor = PS["Phina.Accessor"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_App_Interactive_Builder = PS["Phina.App.Interactive.Builder"];
  var Phina_Display_CircleShape = PS["Phina.Display.CircleShape"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var waitMove = function (board) {
      return function (state) {
          var wait = function (side) {
              return function (pos) {
                  return function (icon) {
                      return Effect_Aff.makeAff(function (f) {
                          return Data_Functor.voidLeft(Effect.functorEffect)(Phina_App_Interactive.onPointEnd(Phina_Display_CircleShape.interactiveCircleShape)(function (e) {
                              return function (v) {
                                  return Control_Applicative.when(Effect.applicativeEffect)(e.over)(f(Data_Either.Right.create(new Game_Othello_Message.Move(state.side, pos))));
                              };
                          })(icon))(Effect_Aff.nonCanceler);
                      });
                  };
              };
          };
          var makeSuggestion = function (v) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return function (v2) {
                      return {
                          pos: v.value0,
                          cell: v1,
                          flippableCells: v2
                      };
                  };
              })(Data_Matrix.index(v.value0.x)(v.value0.y)(state.cells)))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Functor.map(Data_Functor.functorArray)(function (fpos) {
                  return Data_Matrix.index(fpos.x)(fpos.y)(state.cells);
              })(v.value1)));
          };
          var addFlippableIcons = function (side) {
              return function (icon) {
                  return function (flippableCells) {
                      return function __do() {
                          var v = Data_Functor.map(Effect.functorEffect)(Data_Array.unzip)(Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(flippableCells)(function (fcell) {
                              return function __do() {
                                  var v = Phina_Accessor.getWidth(Phina_Types_Property.readableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(fcell)();
                                  var v1 = Phina_Display_CircleShape.newCircleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.piece(v)(Game_Othello_Board.enemy(side)))();
                                  var v2 = Game_Style.style.suggestAnimation(side)(v1)();
                                  var v3 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_CircleShape.newCircleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))))(Game_Style.style.suggestMask(v)))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Accessor.setVisible(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(false)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_App_Element_Builder.addChildB(Phina_Display_CircleShape.isElementCircleShape)(Phina_Display_CircleShape.containerCircleShape)(v1))(function () {
                                          return Phina_App_Element_Builder.addChildToB(Phina_Display_CircleShape.isElementCircleShape)(Phina_Display_DisplayElement.containerDisplayElement)(fcell);
                                      });
                                  }))();
                                  var stop = Control_Apply.applySecond(Effect.applyEffect)(Phina_Accessor.setVisible(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(false)(v3))(v2.stop);
                                  var play = Control_Apply.applySecond(Effect.applyEffect)(Phina_Accessor.setVisible(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(true)(v3))(v2.play);
                                  return new Data_Tuple.Tuple(v3, {
                                      play: play,
                                      stop: stop
                                  });
                              };
                          })))();
                          var v1 = Phina_App_Interactive.onPointOver(Phina_Display_CircleShape.interactiveCircleShape)(function (v1) {
                              return function (v2) {
                                  return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (v3) {
                                      return v3.play;
                                  })(v.value1);
                              };
                          })(icon)();
                          var v2 = Phina_App_Interactive.onPointOut(Phina_Display_CircleShape.interactiveCircleShape)(function (v2) {
                              return function (v3) {
                                  return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (v4) {
                                      return v4.stop;
                                  })(v.value1);
                              };
                          })(icon)();
                          var v3 = Phina_App_Element.onRemoved(Phina_Display_CircleShape.isElementCircleShape)(function (v3) {
                              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Phina_App_Element.remove(Phina_Display_CircleShape.isElementCircleShape))(v.value0);
                          })(icon)();
                          return Data_Unit.unit;
                      };
                  };
              };
          };
          var addIcons = function (side) {
              return function (v) {
                  return function __do() {
                      var v1 = Phina_Accessor.getWidth(Phina_Types_Property.readableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(v.cell)();
                      var v2 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_CircleShape.newCircleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.piece(v1)(side)))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Accessor.setAlpha(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Game_Style.style.movableIconAlpha)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_App_Interactive_Builder.setInteractiveB(Phina_Display_CircleShape.interactiveCircleShape)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(true))(function () {
                              return Phina_App_Element_Builder.addChildToB(Phina_Display_CircleShape.isElementCircleShape)(Phina_Display_DisplayElement.containerDisplayElement)(v.cell);
                          });
                      }))();
                      addFlippableIcons(side)(v2)(v.flippableCells)();
                      return {
                          pos: v.pos,
                          icon: v2
                      };
                  };
              };
          };
          var addFlippable = function (pos) {
              return Data_Tuple.Tuple.create(pos)(Game_Othello_Board.getFlippablePieces(board)(state.side)(pos));
          };
          var suggestions = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(makeSuggestion)(addFlippable))(Game_Othello_Board.getMovablePos(board)(state.side)));
          var $47 = Data_Array["null"](suggestions);
          if ($47) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_Othello_Message.Pass(state.side)), state));
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Functor.map(Data_Functor.functorArray)(addIcons(state.side))(suggestions))))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Control_Parallel.parOneOf(Effect_Aff.parallelAff)(Effect_Aff.alternativeParAff)(Data_Foldable.foldableArray)(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return wait(state.side)(v1.pos)(v1.icon);
              })(v)))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function ($59) {
                      return Phina_App_Element.remove(Phina_Display_CircleShape.isElementCircleShape)((function (v2) {
                          return v2.icon;
                      })($59));
                  })(v)))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(new Data_Maybe.Just(v1), state));
                  });
              });
          });
      };
  };
  var stepTurn = function (board) {
      return function (side) {
          return function (state) {
              var $53 = Data_Eq.eq(Game_Othello_Board.eqSide)(side)(state.side);
              if ($53) {
                  return waitMove(board)(state);
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
          };
      };
  };
  var newHumanPlayer = function (side) {
      var step = function (v) {
          return function (state) {
              if (v instanceof Game_Player_Message.Ready) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(new Data_Maybe.Just(Game_Othello_Message.OK.value), {
                      cells: v.value0,
                      side: state.side
                  }));
              };
              if (v instanceof Game_Player_Message.Turn) {
                  return stepTurn(v.value0)(v.value1)(state);
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
          };
      };
      var initialState = {
          side: side,
          cells: Data_Matrix.empty
      };
      return Effect_FSM.machineAff(step)(initialState)(Game_Player_Message.Init.value)(Game_Othello_Message.Init.value);
  };
  exports["newHumanPlayer"] = newHumanPlayer;
})(PS["Game.Human"] = PS["Game.Human"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Map = PS["Data.Map"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Player_Types = PS["Game.Player.Types"];                 
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  var Pass = (function () {
      function Pass() {

      };
      Pass.value = new Pass();
      return Pass;
  })();
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var Ready = (function () {
      function Ready(value0) {
          this.value0 = value0;
      };
      Ready.create = function (value0) {
          return new Ready(value0);
      };
      return Ready;
  })();
  var Turn = (function () {
      function Turn(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Turn.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Turn(value0, value1, value2);
              };
          };
      };
      return Turn;
  })();
  var Finish = (function () {
      function Finish(value0) {
          this.value0 = value0;
      };
      Finish.create = function (value0) {
          return new Finish(value0);
      };
      return Finish;
  })();
  exports["Move"] = Move;
  exports["Pass"] = Pass;
  exports["Init"] = Init;
  exports["Ready"] = Ready;
  exports["Turn"] = Turn;
  exports["Finish"] = Finish;
})(PS["Game.View.Message"] = PS["Game.View.Message"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_FSM = PS["Effect.FSM"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Othello_Message = PS["Game.Othello.Message"];
  var Game_View_Message = PS["Game.View.Message"];
  var Prelude = PS["Prelude"];                 
  var stepPass = function (side) {
      return function (state) {
          return Control_Applicative.pure(Effect.applicativeEffect)((function () {
              var side$prime = Game_Othello_Board.enemy(side);
              var state$prime = {
                  side: side$prime,
                  board: state.board,
                  okCount: state.okCount
              };
              var msg = (function () {
                  var $5 = Data_Array["null"](Game_Othello_Board.getMovablePos(state.board)(Game_Othello_Board.enemy(side)));
                  if ($5) {
                      return new Game_View_Message.Finish(state.board);
                  };
                  return new Game_View_Message.Turn(Game_View_Message.Pass.value, state.board, side$prime);
              })();
              return new Data_Tuple.Tuple(new Data_Maybe.Just(msg), state$prime);
          })());
      };
  };
  var stepOK = function (state) {
      return Control_Applicative.pure(Effect.applicativeEffect)((function () {
          var nextState = {
              okCount: state.okCount + 1 | 0,
              board: state.board,
              side: state.side
          };
          var $6 = nextState.okCount >= 2;
          if ($6) {
              return new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_View_Message.Turn(Game_View_Message.Move.value, state.board, state.side)), nextState);
          };
          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, nextState);
      })());
  };
  var stepMove = function (side) {
      return function (pos) {
          return function (state) {
              var $7 = Data_Eq.eq(Game_Othello_Board.eqSide)(side)(state.side);
              if ($7) {
                  var v = Game_Othello_Board.move(state.board)(side)(pos);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Effect.applicativeEffect)((function () {
                          var side$prime = Game_Othello_Board.enemy(side);
                          var state$prime = {
                              board: v.value0,
                              side: side$prime,
                              okCount: state.okCount
                          };
                          return new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_View_Message.Turn(Game_View_Message.Move.value, v.value0, side$prime)), state$prime);
                      })());
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
                  };
                  throw new Error("Failed pattern match at Game.Othello line 47, column 7 - line 52, column 45: " + [ v.constructor.name ]);
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
          };
      };
  };
  var newOthello = (function () {
      var step = function (v) {
          return function (state) {
              if (v instanceof Game_Othello_Message.Start) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_View_Message.Ready(v.value0)), state));
              };
              if (v instanceof Game_Othello_Message.OK) {
                  return stepOK(state);
              };
              if (v instanceof Game_Othello_Message.Move) {
                  return stepMove(v.value0)(v.value1)(state);
              };
              if (v instanceof Game_Othello_Message.Pass) {
                  return stepPass(v.value0)(state);
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
          };
      };
      var initialState = {
          board: Game_Othello_Board.initialBoard,
          side: Game_Othello_Board.Dark.value,
          okCount: 0
      };
      return Effect_FSM.machine(step)(initialState)(Game_Othello_Message.Init.value)(Game_View_Message.Init.value);
  })();
  exports["newOthello"] = newOthello;
})(PS["Game.Othello"] = PS["Game.Othello"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var IsGameScene = function (IsScene0) {
      this.IsScene0 = IsScene0;
  };
  var toSceneHandle$prime = function (dictIsGameScene) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["IsGameScene"] = IsGameScene;
  exports["toSceneHandle'"] = toSceneHandle$prime;
})(PS["Phina.Game.Scene"] = PS["Phina.Game.Scene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Effect = PS["Effect"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_Scene = PS["Phina.Game.Scene"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];                 
  var hasPropertyResultScene = function (dictHasProperty) {
      return Phina_Types_Property.HasProperty;
  };
  var hasGridResultScene = Phina_Util_Grid.HasGrid;
  var edResultScene = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveResultScene = new Phina_App_Interactive.Interactive(function () {
      return edResultScene;
  });
  var isElementResultScene = new Phina_App_Element.IsElement(function () {
      return edResultScene;
  });
  var containerResultScene = Phina_App_Element.Container;
  var isSceneResultScene = new Phina_Display_DisplayScene.IsScene(function () {
      return containerResultScene;
  }, function () {
      return edResultScene;
  }, function () {
      return hasGridResultScene;
  }, function () {
      return interactiveResultScene;
  }, function () {
      return isElementResultScene;
  }, function (v) {
      return "ResultScene";
  });
  var isGameSceneResultScene = function (dictSubRow) {
      return new Phina_Game_Scene.IsGameScene(function () {
          return isSceneResultScene;
      });
  };
  exports["hasPropertyResultScene"] = hasPropertyResultScene;
  exports["edResultScene"] = edResultScene;
  exports["isElementResultScene"] = isElementResultScene;
  exports["containerResultScene"] = containerResultScene;
  exports["hasGridResultScene"] = hasGridResultScene;
  exports["interactiveResultScene"] = interactiveResultScene;
  exports["isSceneResultScene"] = isSceneResultScene;
  exports["isGameSceneResultScene"] = isGameSceneResultScene;
})(PS["Phina.Game.ResultScene"] = PS["Phina.Game.ResultScene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var setPropsB = function (dictWritable) {
      return function ($9) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Types_Property.setProps(dictWritable)($9));
      };
  };
  exports["setPropsB"] = setPropsB;
})(PS["Phina.Types.Property.Builder"] = PS["Phina.Types.Property.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Ref = PS["Effect.Ref"];
  var Game_Config = PS["Game.Config"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Player_Types = PS["Game.Player.Types"];
  var Game_Style = PS["Game.Style"];
  var Phina = PS["Phina"];
  var Phina_Accessor = PS["Phina.Accessor"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Game_ResultScene = PS["Phina.Game.ResultScene"];
  var Phina_Game_Scene = PS["Phina.Game.Scene"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Property_Builder = PS["Phina.Types.Property.Builder"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var resultScene = function (result) {
      var getScoreStr = (function () {
          var getScore = function (side) {
              return Data_Maybe.maybe(0)(Data_Tuple.snd)(Data_Map_Internal.lookup(Game_Othello_Board.ordSide)(side)(result));
          };
          return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" - ")(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(Data_Show.show(Data_Show.showInt))(getScore))([ Game_Othello_Board.Dark.value, Game_Othello_Board.Light.value ]));
      })();
      var getMessageStr = (function () {
          var getPlayerName = function (side) {
              return Data_Maybe.maybe("Unknown")(function ($9) {
                  return Game_Player_Types.getShortName(Data_Tuple.fst($9));
              })(Data_Map_Internal.lookup(Game_Othello_Board.ordSide)(side)(result));
          };
          var playerNames = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" vs ")(Data_Functor.map(Data_Functor.functorArray)(getPlayerName)([ Game_Othello_Board.Dark.value, Game_Othello_Board.Light.value ]));
          return playerNames + (" in " + Game_Config.config.title);
      })();
      var bgcolor = function (alpha) {
          return Phina_Types_Color.color("rgba(0, 0, 0, " + (Data_Show.show(Data_Show.showNumber)(alpha) + ")"));
      };
      var setupScene = function (v) {
          return function (v1) {
              return Phina_Types_Monad_Builder.build(Phina_Types_Builder.monadBuilderBuilder)(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Property_Builder.setPropsB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Game_ResultScene.hasPropertyResultScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                  backgroundColor: bgcolor(0.0)
              }))(function () {
                  return Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Effect_Class.liftEffect(Phina_Types_Builder.monadEffectBuilder)(Effect_Ref["new"](0.0)))(function (v2) {
                      return Phina_App_Element_Builder.setUpdaterB(Phina_Game_ResultScene.isElementResultScene)(function (app) {
                          return function (scene) {
                              return function __do() {
                                  var v3 = Effect_Ref.read(v2)();
                                  return Control_Applicative.when(Effect.applicativeEffect)(v3 < Game_Style.style.resultSceneAlpha)(function __do() {
                                      var v4 = Phina_Accessor.getFps(Phina_Types_Property.readableProp(Phina_Game_GameApp.hasPropertyGameApp(Phina_Game_GameApp.hasPropertyGameAppReady)())(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(app)();
                                      var delta = Game_Style.style.resultSceneAlpha / Game_Style.style.sceneTransitionTime / v4;
                                      var alpha$prime = Data_Ord.min(Data_Ord.ordNumber)(Game_Style.style.resultSceneAlpha)(v3 + delta);
                                      var v5 = Phina_Accessor.setBackgroundColor(Phina_Types_Property.writableProp(Phina_Game_ResultScene.hasPropertyResultScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(bgcolor(alpha$prime))(scene)();
                                      return Effect_Ref.write(alpha$prime)(v2)();
                                  })();
                              };
                          };
                      });
                  });
              }));
          };
      };
      return Phina_Display_DisplayScene.popup(Phina_Game_ResultScene.isSceneResultScene)(Phina_Display_DisplayScene.isSceneDisplayScene)(Phina_Game_Scene["toSceneHandle'"](Phina_Game_ResultScene.isGameSceneResultScene(Phina_Types_Row.subRowInstance()))(setupScene))({
          score: getScoreStr,
          message: getMessageStr,
          hashtags: "phina_js,phinajs,game,purescript,javascript"
      });
  };
  exports["resultScene"] = resultScene;
})(PS["Game.Scenes.Result"] = PS["Game.Scenes.Result"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var setTextB = function ($0) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_Label.setText($0));
  };
  exports["setTextB"] = setTextB;
})(PS["Phina.Display.Label.Builder"] = PS["Phina.Display.Label.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];                 
  var setPositionB$prime = function (dictWritable) {
      return function (x) {
          return function (y) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Types_Position["setPosition'"](dictWritable)(x)(y));
          };
      };
  };
  var setPositionB = function (dictWritable) {
      return function ($3) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Types_Position.setPosition(dictWritable)($3));
      };
  };
  exports["setPositionB"] = setPositionB;
  exports["setPositionB'"] = setPositionB$prime;
})(PS["Phina.Types.Position.Builder"] = PS["Phina.Types.Position.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Style = PS["Game.Style"];
  var Phina = PS["Phina"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Display_Label_Builder = PS["Phina.Display.Label.Builder"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Position_Builder = PS["Phina.Types.Position.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var updateScoreDisplay = function (scores) {
      return function (scoreDisplay) {
          var updateDigit = function (nowScore) {
              return function (nextScore) {
                  return function (i) {
                      return function (label) {
                          var nowDigit = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(nowScore)(Data_Int.pow(10)(i)))(10);
                          var nextDigit = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(nextScore)(Data_Int.pow(10)(i)))(10);
                          var str = (function () {
                              var $5 = i > 0 && nextDigit === 0;
                              if ($5) {
                                  return " ";
                              };
                              return Data_Show.show(Data_Show.showInt)(nextDigit);
                          })();
                          return Control_Applicative.when(Effect.applicativeEffect)(nowDigit !== nextDigit)(Data_Functor["void"](Effect.functorEffect)(Phina_Accessory_Tweener.animate(Phina_Display_Label.tweenableLabel)(Game_Style.style.digitAnimation(str))(label)));
                      };
                  };
              };
          };
          var updateScore = function (side) {
              return function (v) {
                  var v1 = Data_Map_Internal.lookup(Game_Othello_Board.ordSide)(side)(scores);
                  if (v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map(Effect.functorEffect)(function (v2) {
                          return new Data_Tuple.Tuple(v1.value0, v.value1);
                      })(Data_FoldableWithIndex.traverseWithIndex_(Effect.applicativeEffect)(Data_FoldableWithIndex.foldableWithIndexArray)(updateDigit(v.value0)(v1.value0))(v.value1));
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(v);
                  };
                  throw new Error("Failed pattern match at Game.View.Score line 50, column 9 - line 54, column 33: " + [ v1.constructor.name ]);
              };
          };
          return Data_Traversable.sequence(Data_Map_Internal.traversableMap)(Effect.applicativeEffect)(Data_FunctorWithIndex.mapWithIndex(Data_Map_Internal.functorWithIndexMap)(updateScore)(scoreDisplay));
      };
  };
  var addScoreDisplay = function (scene) {
      var addDigitLabel = function (side) {
          return function (digit) {
              return Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))))))(Game_Style.style.digit(side)(digit)))(Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Effect_Class.liftEffect(Phina_Types_Builder.monadEffectBuilder)(Game_Style.layout.mainScene.scoreDigit(side)(digit)(scene)))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Display_Label_Builder.setTextB((function () {
                      var $13 = digit > 0;
                      if ($13) {
                          return " ";
                      };
                      return "2";
                  })()))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v))(function () {
                          return Phina_App_Element_Builder.addChildToB(Phina_Display_Label.isElementLabel)(Phina_Display_DisplayScene.containerDisplayScene)(scene);
                      });
                  });
              }));
          };
      };
      var newScoreLabels = function (side) {
          return Data_Functor.map(Effect.functorEffect)(function (v) {
              return new Data_Tuple.Tuple(side, new Data_Tuple.Tuple(2, v));
          })(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Functor.map(Data_Functor.functorArray)(addDigitLabel(side))([ 0, 1 ])));
      };
      return Data_Functor.map(Effect.functorEffect)(Data_Map_Internal.fromFoldable(Game_Othello_Board.ordSide)(Data_Foldable.foldableArray))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Functor.map(Data_Functor.functorArray)(newScoreLabels)([ Game_Othello_Board.Dark.value, Game_Othello_Board.Light.value ])));
  };
  exports["addScoreDisplay"] = addScoreDisplay;
  exports["updateScoreDisplay"] = updateScoreDisplay;
})(PS["Game.View.Score"] = PS["Game.View.Score"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Phina = PS["Phina"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Playable = PS["Phina.Types.Playable"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var setActive = function (isActive) {
      return function (turnAnimation) {
          return function __do() {
              var v = Effect_Ref.read(turnAnimation)();
              Control_Applicative.when(Effect.applicativeEffect)(isActive)(Data_Functor["void"](Effect.functorEffect)(Phina_Types_Playable.resume(Phina_Accessory_Tweener.playableTweener)(v.tweener)))();
              return Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(function (v1) {
                  return {
                      isActive: isActive,
                      tweener: v1.tweener
                  };
              })(turnAnimation))();
          };
      };
  };
  var newTurnAnimation = function (label) {
      return function (animation) {
          var controller = function (turnAnimation) {
              return function (l) {
                  return function __do() {
                      var v = Effect_Ref.read(turnAnimation)();
                      return Data_Functor.voidRight(Effect.functorEffect)(l)(Control_Applicative.unless(Effect.applicativeEffect)(v.isActive)(Data_Functor["void"](Effect.functorEffect)(Phina_Types_Playable.pause(Phina_Accessory_Tweener.playableTweener)(v.tweener))))();
                  };
              };
          };
          return function __do() {
              var v = Phina_Accessory_Tweener.addTween(Phina_Display_Label.tweenableLabel)(Control_Applicative.pure(Phina_Types_Builder.applicativeBuilder)(Data_Unit.unit))(label)();
              var v1 = Effect_Ref["new"]({
                  tweener: v,
                  isActive: false
              })();
              var tween = animation(controller(v1));
              var v2 = Phina_Accessory_Tweener.addTween(Phina_Display_Label.tweenableLabel)(tween)(label)();
              var v3 = Effect_Ref.modify(function (v3) {
                  return {
                      tweener: v2,
                      isActive: v3.isActive
                  };
              })(v1)();
              return v1;
          };
      };
  };
  exports["newTurnAnimation"] = newTurnAnimation;
  exports["setActive"] = setActive;
})(PS["Game.View.TurnAnimation"] = PS["Game.View.TurnAnimation"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var animateB = function (dictTweenable) {
      return function ($2) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Accessory_Tweener.animate(dictTweenable)($2));
      };
  };
  exports["animateB"] = animateB;
})(PS["Phina.Accessory.Tweener.Builder"] = PS["Phina.Accessory.Tweener.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Effect = PS["Effect"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];                 
  var hasPropertyRectangleShape = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };                                                                
  var edRectangleShape = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveRectangleShape = new Phina_App_Interactive.Interactive(function () {
      return edRectangleShape;
  });
  var isElementRectangleShape = new Phina_App_Element.IsElement(function () {
      return edRectangleShape;
  });
  var isDeRectangleShape = new Phina_Display_DisplayElement.IsDisplayElement(function () {
      return interactiveRectangleShape;
  }, function () {
      return isElementRectangleShape;
  });
  var isShapeRectangleShape = new Phina_Display_Shape.IsShape(function () {
      return isDeRectangleShape;
  }, function (v) {
      return "RectangleShape";
  });
  var newRectangleShape = function (dictWritable) {
      return Phina_Display_Shape.newShape(isShapeRectangleShape)(dictWritable);
  };                                                                                    
  var tweenableRectangleShape = new Phina_Accessory_Tweener.Tweenable(function () {
      return isElementRectangleShape;
  });
  var containerRectangleShape = Phina_App_Element.Container;
  exports["newRectangleShape"] = newRectangleShape;
  exports["hasPropertyRectangleShape"] = hasPropertyRectangleShape;
  exports["isShapeRectangleShape"] = isShapeRectangleShape;
  exports["edRectangleShape"] = edRectangleShape;
  exports["isElementRectangleShape"] = isElementRectangleShape;
  exports["containerRectangleShape"] = containerRectangleShape;
  exports["isDeRectangleShape"] = isDeRectangleShape;
  exports["interactiveRectangleShape"] = interactiveRectangleShape;
  exports["tweenableRectangleShape"] = tweenableRectangleShape;
})(PS["Phina.Display.RectangleShape"] = PS["Phina.Display.RectangleShape"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Prelude = PS["Prelude"];                 
  var setSizeB = function (dictWritable) {
      return function ($2) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Types_Size.setSize(dictWritable)($2));
      };
  };
  exports["setSizeB"] = setSizeB;
})(PS["Phina.Types.Size.Builder"] = PS["Phina.Types.Size.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Int = PS["Data.Int"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_FSM = PS["Effect.FSM"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Player_Message = PS["Game.Player.Message"];
  var Game_Player_Types = PS["Game.Player.Types"];
  var Game_Scenes_Result = PS["Game.Scenes.Result"];
  var Game_Style = PS["Game.Style"];
  var Game_View_Message = PS["Game.View.Message"];
  var Game_View_Score = PS["Game.View.Score"];
  var Game_View_TurnAnimation = PS["Game.View.TurnAnimation"];
  var $$Math = PS["Math"];
  var Phina = PS["Phina"];
  var Phina_Accessor = PS["Phina.Accessor"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_Accessory_Tweener_Builder = PS["Phina.Accessory.Tweener.Builder"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_CircleShape = PS["Phina.Display.CircleShape"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Display_RectangleShape = PS["Phina.Display.RectangleShape"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Async = PS["Phina.Types.Async"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Position_Builder = PS["Phina.Types.Position.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Types_Size_Builder = PS["Phina.Types.Size.Builder"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Phina_Util_Tween = PS["Phina.Util.Tween"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var stepReady = function (players) {
      return function (state) {
          var addNameWithTurnAnimation = function (side) {
              return function (name) {
                  var newLabel$prime = Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.nameLabel(side)(name));
                  return function __do() {
                      var v = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(newLabel$prime)(Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Effect_Class.liftEffect(Phina_Types_Builder.monadEffectBuilder)(Game_Style.layout.mainScene.nameLabel(side)(state.scene)))(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v))(function () {
                              return Phina_App_Element_Builder.addChildToB(Phina_Display_Label.isElementLabel)(Phina_Display_DisplayScene.containerDisplayScene)(state.scene);
                          });
                      }))();
                      return Game_View_TurnAnimation.newTurnAnimation(v)(Game_Style.style.turnAnimation)();
                  };
              };
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Traversable.sequence(Data_Map_Internal.traversableMap)(Effect.applicativeEffect)(Data_FunctorWithIndex.mapWithIndex(Data_Map_Internal.functorWithIndexMap)(addNameWithTurnAnimation)(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Show.show(Game_Player_Types.showPlayerType))(players)))))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.makeAff(function (f) {
                  return function __do() {
                      var v1 = Phina_Accessory_Tweener.animate(Phina_Display_RectangleShape.tweenableRectangleShape)(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.to(Phina_Types_Property.toParams(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))({
                          alpha: 1.0
                      }))(Phina_Types_Duration.sec(Phina_Types_Numerical.numericalNumber)(Game_Style.style.sceneTransitionTime))(Phina_Util_Tween.easeDefault))(function () {
                          return Phina_Accessory_Tweener.call(function (s) {
                              return Data_Functor.voidLeft(Effect.functorEffect)(f(new Data_Either.Right(Data_Unit.unit)))(s);
                          });
                      }))(state.stage)();
                      return Effect_Aff.nonCanceler;
                  };
              }))(function () {
                  var nextState = {
                      turnAnimation: v,
                      players: players,
                      cells: state.cells,
                      scene: state.scene,
                      scoreDisplay: state.scoreDisplay,
                      stage: state.stage
                  };
                  var msg = Game_Player_Message.Ready.create(Data_Functor.map(Data_Matrix.functorMatrix)(function ($124) {
                      return Phina_Display_DisplayElement.toDisplayElement(Phina_Display_RectangleShape.isDeRectangleShape)(Data_Tuple.fst($124));
                  })(state.cells));
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(new Data_Maybe.Just(msg), nextState));
              });
          });
      };
  };
  var stepFinish = function (exit) {
      return function (board) {
          return function (state) {
              return Effect_Aff.makeAff(function (f) {
                  return function __do() {
                      Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Game_View_TurnAnimation.setActive(false))(state.turnAnimation)();
                      var v = Phina_Util_Grid.getCenterPos(Phina_Display_DisplayScene.hasGridDisplayScene)(state.scene)();
                      var addScore = function (side) {
                          return function (playerType) {
                              return Data_Tuple.Tuple.create(playerType)(Game_Othello_Board.getScore(board)(side));
                          };
                      };
                      var result = Data_FunctorWithIndex.mapWithIndex(Data_Map_Internal.functorWithIndexMap)(addScore)(state.players);
                      var f$prime = function __do() {
                          var v1 = Phina_Types_Async["launchAsync'"](Control_Bind.bind(Phina_Types_Async.bindAsync)(Game_Scenes_Result.resultScene(result))(function (v1) {
                              return Effect_Class.liftEffect(Phina_Types_Async.monadEffectAsync)(exit);
                          }))(state.scene)();
                          return f(Data_Either.Left.create(Effect_Exception.error("finish")))();
                      };
                      var v1 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))))))(Game_Style.style.finishLabel))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener_Builder.animateB(Phina_Display_Label.tweenableLabel)(Game_Style.style.finishAnimation(f$prime)))(function () {
                              return Phina_App_Element_Builder.addChildToB(Phina_Display_Label.isElementLabel)(Phina_Display_RectangleShape.containerRectangleShape)(state.stage);
                          });
                      }))();
                      return Effect_Aff.nonCanceler;
                  };
              });
          };
      };
  };
  var newPiece = function (cell) {
      return function (side) {
          return function __do() {
              var v = Phina_Accessor.getWidth(Phina_Types_Property.readableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(cell)();
              return Phina_Display_CircleShape.newCircleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.piece(v)(side))();
          };
      };
  };
  var updateBoard = function (board) {
      return function (state) {
          var zipFlipPieces = Data_Matrix.zipWith(function (s) {
              return function (v) {
                  if (s instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
                      return Data_Tuple.Tuple.create(v.value0)(Data_Maybe.Just.create(new Data_Tuple.Tuple(s.value0, v.value1.value0.value1)));
                  };
                  return v;
              };
          });
          var getFlippedPieces = Data_Matrix.zipWith(function (p) {
              return function (v) {
                  if (p instanceof Game_Othello_Board.Piece && (v.value1 instanceof Data_Maybe.Just && Data_Eq.notEq(Game_Othello_Board.eqSide)(p.value0)(v.value1.value0.value0))) {
                      return new Data_Maybe.Just(p.value0);
                  };
                  return Data_Maybe.Nothing.value;
              };
          });
          var getAddedPieces = Data_Matrix.zipWith(function (p) {
              return function (v) {
                  if (p instanceof Game_Othello_Board.Piece && v.value1 instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(p.value0);
                  };
                  return Data_Maybe.Nothing.value;
              };
          });
          var flipShapes = Data_Matrix.zipWith(function (s) {
              return function (v) {
                  if (s instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
                      return Data_Maybe.Just.create(new Data_Tuple.Tuple(s.value0, v.value1.value0.value1));
                  };
                  return Data_Maybe.Nothing.value;
              };
          });
          var calcDist = function (a) {
              return function (b) {
                  return $$Math.sqrt(Data_Int.toNumber(Data_Int.pow(a.x - b.x | 0)(2) + Data_Int.pow(a.y - b.y | 0)(2) | 0));
              };
          };
          var mapAnimation = function (origin) {
              return Data_FunctorWithIndex.mapWithIndex(Data_Matrix.functorWithIndexMatrix)(function (pos) {
                  return function (s) {
                      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(s)(function (v) {
                          var dist = Data_Maybe.maybe(0.0)(function (o) {
                              return calcDist(pos)(o);
                          })(origin);
                          return Effect_Aff.makeAff(function (f) {
                              var tween = Game_Style.style.flipAnimation(dist - 1.0)(v.value0)(f(new Data_Either.Right(Data_Unit.unit)));
                              return Data_Functor.voidLeft(Effect.functorEffect)(Phina_Accessory_Tweener.animate(Phina_Display_CircleShape.tweenableCircleShape)(tween)(v.value1))(Effect_Aff.nonCanceler);
                          });
                      });
                  };
              });
          };
          var flipPieces = function (news) {
              return function (flips) {
                  return function (cells) {
                      var origin = Data_Array.head(Data_Matrix.catMaybes(Data_FunctorWithIndex.mapWithIndex(Data_Matrix.functorWithIndexMatrix)(function (pos) {
                          return function (s) {
                              return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(s)(pos);
                          };
                      })(news)));
                      var flips$prime = flipShapes(flips)(cells);
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_Foldable.foldableArray)(Data_Matrix.catMaybes(mapAnimation(origin)(flips$prime))))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(zipFlipPieces(flips)(cells));
                      });
                  };
              };
          };
          var addPieces = Data_Matrix.zipWithA(Effect.applicativeEffect)(function (s) {
              return function (v) {
                  return Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create(v.value0))((function () {
                      if (s instanceof Data_Maybe.Just) {
                          return function __do() {
                              var v1 = newPiece(v.value0)(s.value0)();
                              var v2 = Phina_App_Element.addChild(Phina_Display_CircleShape.isElementCircleShape)(Phina_Display_RectangleShape.containerRectangleShape)(v1)(v.value0)();
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(s.value0, v1));
                          };
                      };
                      return Control_Applicative.pure(Effect.applicativeEffect)(v.value1);
                  })());
              };
          });
          var news = getAddedPieces(board)(state.cells);
          var flips = getFlippedPieces(board)(state.cells);
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(addPieces(news)(state.cells)))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(flipPieces(news)(flips)(v))(function (v1) {
                  var scores = Data_Map_Internal.fromFoldable(Game_Othello_Board.ordSide)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (side) {
                      return Data_Tuple.Tuple.create(side)(Game_Othello_Board.getScore(board)(side));
                  })([ Game_Othello_Board.Dark.value, Game_Othello_Board.Light.value ]));
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Game_View_Score.updateScoreDisplay(scores)(state.scoreDisplay)))(function (v2) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                          cells: v1,
                          scoreDisplay: v2,
                          players: state.players,
                          scene: state.scene,
                          stage: state.stage,
                          turnAnimation: state.turnAnimation
                      });
                  });
              });
          });
      };
  };
  var newBoard = function (width) {
      return function __do() {
          var v = Phina_Display_RectangleShape.newRectangleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))))(Game_Style.style.board(width))();
          var v1 = Phina_Accessor.getWidth(Phina_Types_Property.readableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(v)();
          var offset = v1 / 8.0 / 2.0 - v1 / 2.0;
          var grid = Phina_Util_Grid.newGrid(v1)(8)(false)(offset);
          var cellWidth = Phina_Util_Grid.getUnit(grid);
          var mapCell = Data_FunctorWithIndex.mapWithIndex(Data_Matrix.functorWithIndexMatrix)(function (v2) {
              return function (v3) {
                  return function __do() {
                      var v4 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_RectangleShape.newRectangleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.cell(cellWidth)))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder["setPositionB'"](Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(Phina_Util_Grid.getSpan(v2.x)(grid))(Phina_Util_Grid.getSpan(v2.y)(grid)))(function () {
                          return Phina_App_Element_Builder.addChildToB(Phina_Display_RectangleShape.isElementRectangleShape)(Phina_Display_RectangleShape.containerRectangleShape)(v);
                      }))();
                      return new Data_Tuple.Tuple(v4, Data_Maybe.Nothing.value);
                  };
              };
          });
          var v2 = Data_Traversable.sequence(Data_Matrix.traversableMatrix)(Effect.applicativeEffect)(mapCell(Data_Matrix.replicate(8)(8)(cellWidth)))();
          return new Data_Tuple.Tuple(v, v2);
      };
  };
  var initialState = function (scene) {
      return function __do() {
          var v = Phina_Accessor.setBackgroundColor(Phina_Types_Property.writableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Color.color("transparent"))(scene)();
          var v1 = Phina_Types_Size.getSize(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(scene)();
          var v2 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_RectangleShape.newRectangleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.stage))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Size_Builder.setSizeB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v1))(function () {
              return Phina_App_Element_Builder.addChildToB(Phina_Display_RectangleShape.isElementRectangleShape)(Phina_Display_DisplayScene.containerDisplayScene)(scene);
          }))();
          var v3 = Game_Style.layout.mainScene.board(scene)();
          var v4 = newBoard(v1.width)();
          var v5 = Phina_Types_Position.setPosition(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v3)(v4.value0)();
          var v6 = Phina_App_Element.addChild(Phina_Display_RectangleShape.isElementRectangleShape)(Phina_Display_RectangleShape.containerRectangleShape)(v4.value0)(v2)();
          var v7 = Game_View_Score.addScoreDisplay(scene)();
          return {
              scene: scene,
              stage: v2,
              cells: v4.value1,
              turnAnimation: Data_Map_Internal.empty,
              scoreDisplay: v7,
              players: Data_Map_Internal.empty
          };
      };
  };
  var displayPass = function (state) {
      return Effect_Aff.makeAff(function (f) {
          return function __do() {
              var v = Phina_Util_Grid.getCenterPos(Phina_Display_DisplayScene.hasGridDisplayScene)(state.scene)();
              var v1 = Phina_Accessor.getWidth(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(state.scene)();
              var v2 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))))))(Game_Style.style.passLabel))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener_Builder.animateB(Phina_Display_Label.tweenableLabel)(Game_Style.style.passAnimation(v1)(f(new Data_Either.Right(Data_Unit.unit)))))(function () {
                      return Phina_App_Element_Builder.addChildToB(Phina_Display_Label.isElementLabel)(Phina_Display_RectangleShape.containerRectangleShape)(state.stage);
                  });
              }))();
              return Effect_Aff.nonCanceler;
          };
      });
  };
  var stepTurn = function (event) {
      return function (board) {
          return function (side) {
              return function (state) {
                  var updateView = function (v) {
                      return function (v1) {
                          return function (s) {
                              if (v instanceof Game_View_Message.Move) {
                                  return updateBoard(v1)(s);
                              };
                              if (v instanceof Game_View_Message.Pass) {
                                  return Data_Functor.voidLeft(Effect_Aff.functorAff)(displayPass(state))(s);
                              };
                              throw new Error("Failed pattern match at Game.View line 123, column 5 - line 123, column 44: " + [ v.constructor.name, v1.constructor.name, s.constructor.name ]);
                          };
                      };
                  };
                  var doTurnAnimation = function (side$prime) {
                      return function (turnAnimation) {
                          return Control_Applicative.when(Effect.applicativeEffect)(Data_Eq.eq(Game_Othello_Board.eqSide)(side$prime)(side))(Game_View_TurnAnimation.setActive(true)(turnAnimation));
                      };
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Game_View_TurnAnimation.setActive(false))(state.turnAnimation)))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(updateView(event)(board)(state))(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_FoldableWithIndex.traverseWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(doTurnAnimation)(state.turnAnimation)))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Game_Player_Message.Turn(board, side)), v));
                          });
                      });
                  });
              };
          };
      };
  };
  var newView = function (scene) {
      return function (exit) {
          var step = function (v) {
              return function (state) {
                  if (v instanceof Game_View_Message.Ready) {
                      return stepReady(v.value0)(state);
                  };
                  if (v instanceof Game_View_Message.Turn) {
                      return stepTurn(v.value0)(v.value1)(v.value2)(state);
                  };
                  if (v instanceof Game_View_Message.Finish) {
                      return stepFinish(exit)(v.value0)(state);
                  };
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(Data_Maybe.Nothing.value, state));
              };
          };
          return function __do() {
              var v = initialState(scene)();
              return Effect_FSM.machineAff(step)(v)(Game_View_Message.Init.value)(Game_Player_Message.Init.value)();
          };
      };
  };
  exports["newView"] = newView;
})(PS["Game.View"] = PS["Game.View"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Effect_FSM = PS["Effect.FSM"];
  var Game_Computer = PS["Game.Computer"];
  var Game_Computer_Anticipator_Worker = PS["Game.Computer.Anticipator.Worker"];
  var Game_Human = PS["Game.Human"];
  var Game_Othello = PS["Game.Othello"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Othello_Message = PS["Game.Othello.Message"];
  var Game_Player_Types = PS["Game.Player.Types"];
  var Game_View = PS["Game.View"];
  var Phina = PS["Phina"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];                 
  var mainScene = (function () {
      var setupScene = function (v) {
          return function (exit) {
              return function (scene) {
                  var getPlayer = function (v1) {
                      if (v1 instanceof Game_Player_Types.Human) {
                          return Game_Human.newHumanPlayer;
                      };
                      if (v1 instanceof Game_Player_Types.Com) {
                          return Game_Computer.newComputer(v.anticipator)(v1.value0);
                      };
                      throw new Error("Failed pattern match at Game.Scenes.Main line 43, column 9 - line 43, column 41: " + [ v1.constructor.name ]);
                  };
                  return function __do() {
                      var v1 = Game_Othello.newOthello();
                      var v2 = Game_View.newView(scene)(Data_Functor["void"](Effect.functorEffect)(exit({})(scene)))();
                      var v4 = getPlayer(Data_Maybe.fromMaybe(Game_Player_Types.Human.value)(Data_Map_Internal.lookup(Game_Othello_Board.ordSide)(Game_Othello_Board.Dark.value)(v.players)))(Game_Othello_Board.Dark.value)();
                      var v5 = getPlayer(Data_Maybe.fromMaybe(Game_Player_Types.Human.value)(Data_Map_Internal.lookup(Game_Othello_Board.ordSide)(Game_Othello_Board.Light.value)(v.players)))(Game_Othello_Board.Light.value)();
                      var v6 = Effect_FSM.connect(v1)(v2)();
                      var v7 = Effect_FSM.connect(v2)(v4)();
                      var v8 = Effect_FSM.connect(v2)(v5)();
                      var v9 = Effect_FSM.connect(v4)(v1)();
                      var v10 = Effect_FSM.connect(v5)(v1)();
                      return Data_Functor.voidRight(Effect.functorEffect)(scene)(Effect_FSM.send(new Game_Othello_Message.Start(v.players))(v1))();
                  };
              };
          };
      };
      return Phina_Display_DisplayScene.popup(Phina_Display_DisplayScene.isSceneDisplayScene)(Phina_Display_DisplayScene.isSceneDisplayScene)(Phina_Display_DisplayScene.toSceneHandle(setupScene));
  })();
  exports["mainScene"] = mainScene;
})(PS["Game.Scenes.Main"] = PS["Game.Scenes.Main"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Parallel = PS["Control.Parallel"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Random = PS["Effect.Random"];
  var Effect_Ref = PS["Effect.Ref"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Style = PS["Game.Style"];
  var $$Math = PS["Math"];
  var Phina = PS["Phina"];
  var Phina_Accessor = PS["Phina.Accessor"];
  var Phina_Accessory_Tweener_Builder = PS["Phina.Accessory.Tweener.Builder"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_CircleShape = PS["Phina.Display.CircleShape"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Display_RectangleShape = PS["Phina.Display.RectangleShape"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Geom_Vector2 = PS["Phina.Geom.Vector2"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Position_Builder = PS["Phina.Types.Position.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Types_Size_Builder = PS["Phina.Types.Size.Builder"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var hitTestBgPiece = function (size) {
      return function (shape) {
          return Data_Functor.map(Effect.functorEffect)((function () {
              var width = size.width / 2.0;
              var height = size.height / 2.0;
              return function (v) {
                  return v.left <= width && (v.right >= -width && (v.top >= -height && v.bottom <= height));
              };
          })())(Phina_Types_Property.getProps(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))))(shape));
      };
  };
  var getAreaSize = function (dictReadable) {
      return function (stage) {
          return Data_Functor.map(Effect.functorEffect)(function (v) {
              var margin = Game_Style.style.bgPiece.width * 2.0;
              return Data_Semiring.add(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "height";
              }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "width";
              }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(v)({
                  width: margin,
                  height: margin
              });
          })(Phina_Types_Size.getSize(dictReadable)(stage));
      };
  };
  var calcMove = function (duration) {
      return function (velocity) {
          return Phina_Geom_Vector2.flipMulVector2(Phina_Types_Duration.toSec(duration))(velocity);
      };
  };
  var splashBgPieces = function (scene) {
      return function (pieces) {
          var getSplashVelocity = function (piece) {
              return function __do() {
                  var v = Data_Functor.map(Effect.functorEffect)(function (p) {
                      var $38 = Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                          return "y";
                      }))(Data_Eq.eqNumber))()(new Data_Symbol.IsSymbol(function () {
                          return "x";
                      }))(Data_Eq.eqNumber)))(Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                          return "x";
                      }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                          return "y";
                      }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber))))(p);
                      if ($38) {
                          return Phina_Geom_Vector2.up;
                      };
                      return p;
                  })(Phina_Types_Position.getPosition(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(piece.shape))();
                  var length = $$Math.sqrt(v.x * v.x + v.y * v.y);
                  var rate = Game_Style.style.bgPiece.splashSpeed / length;
                  return {
                      x: v.x * rate,
                      y: v.y * rate
                  };
              };
          };
          var splashPiece = function (areaSize) {
              return function (piece) {
                  return Effect_Aff.makeAff(function (f) {
                      return function __do() {
                          var v = getSplashVelocity(piece)();
                          var v1 = Phina_App_Element.setUpdater(Phina_Display_CircleShape.isElementCircleShape)(function (app) {
                              return function (v1) {
                                  return function __do() {
                                      var v2 = Phina_Accessor.getDeltaTime(Phina_Types_Property.readableProp(Phina_Game_GameApp.hasPropertyGameApp(Phina_Game_GameApp.hasPropertyGameAppReady)())(Phina_Types_Property.writableAttrDash)()(Phina_Types_Row.subRowInstance()))(app)();
                                      var v3 = Phina_Types_Position.getPosition(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(piece.shape)();
                                      var v4 = Phina_Types_Position.setPosition(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(Data_Semiring.add(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                                          return "x";
                                      }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                                          return "y";
                                      }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(v3)(calcMove(v2)(v)))(piece.shape)();
                                      var v5 = hitTestBgPiece(areaSize)(piece.shape)();
                                      return Control_Applicative.unless(Effect.applicativeEffect)(v5)(function __do() {
                                          var v6 = Phina_App_Element.remove(Phina_Display_CircleShape.isElementCircleShape)(piece.shape)();
                                          return f(new Data_Either.Right(Data_Unit.unit))();
                                      })();
                                  };
                              };
                          })(piece.shape)();
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(getAreaSize(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(scene)))(function (v) {
              return Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(splashPiece(v))(pieces));
          });
      };
  };
  var addBgPieces = function (scene) {
      var getInitialPosition = function (areaSize) {
          var range = (areaSize.width + areaSize.height) * 2.0;
          return function __do() {
              var v = Effect_Random.randomRange(0.0)(range)();
              var pos = (function () {
                  var $46 = v < areaSize.width;
                  if ($46) {
                      return {
                          x: v,
                          y: 0.0
                      };
                  };
                  var r2 = v - areaSize.width;
                  var $47 = r2 < areaSize.height;
                  if ($47) {
                      return {
                          x: areaSize.width,
                          y: r2
                      };
                  };
                  var r3 = r2 - areaSize.height;
                  var $48 = r3 < areaSize.width;
                  if ($48) {
                      return {
                          x: r3,
                          y: areaSize.height
                      };
                  };
                  var r4 = r3 - areaSize.width;
                  return {
                      x: 0.0,
                      y: r4
                  };
              })();
              return Data_Ring.sub(Data_Ring.ringRecord()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "x";
              }))()(Data_Ring.ringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "y";
              }))()(Data_Ring.ringRecordNil)(Data_Ring.ringNumber))(Data_Ring.ringNumber)))(pos)({
                  x: areaSize.width / 2.0,
                  y: areaSize.height / 2.0
              });
          };
      };
      var resetBgPiece = function (areaSize) {
          return function (piece) {
              return function __do() {
                  var v = getInitialPosition(areaSize)();
                  var v1 = Phina_Types_Position.setPosition(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v)(piece.shape)();
                  var v2 = Phina_Geom_Vector2.randomVector2(Game_Style.style.bgPiece.speed)(Game_Style.style.bgPiece.speed)();
                  return Effect_Ref.write(v2)(piece.velocity)();
              };
          };
      };
      var newBgPiece = function (stage) {
          return function __do() {
              var v = Effect_Random.randomRange(0.9)(1.1)();
              var v1 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_CircleShape.newCircleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.piece(Game_Style.style.bgPiece.width)(Game_Othello_Board.Dark.value)))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener_Builder.animateB(Phina_Display_CircleShape.tweenableCircleShape)(Game_Style.style.bgPieceAnimation(v)))(function () {
                  return Phina_App_Element_Builder.addChildToB(Phina_Display_CircleShape.isElementCircleShape)(Phina_Display_RectangleShape.containerRectangleShape)(stage);
              }))();
              var v2 = Effect_Ref["new"](Phina_Geom_Vector2.up)();
              var piece = {
                  shape: v1,
                  velocity: v2
              };
              var v3 = getAreaSize(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(stage)();
              resetBgPiece(v3)(piece)();
              var v4 = Phina_App_Element.setUpdater(Phina_Display_CircleShape.isElementCircleShape)(function (app) {
                  return function (v4) {
                      return function __do() {
                          var v5 = Phina_Accessor.getDeltaTime(Phina_Types_Property.readableProp(Phina_Game_GameApp.hasPropertyGameApp(Phina_Game_GameApp.hasPropertyGameAppReady)())(Phina_Types_Property.writableAttrDash)()(Phina_Types_Row.subRowInstance()))(app)();
                          var v6 = Effect_Ref.read(v2)();
                          var v7 = Phina_Types_Position.getPosition(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(v1)();
                          var v8 = Phina_Types_Position.setPosition(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_CircleShape.hasPropertyCircleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(Data_Semiring.add(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                              return "x";
                          }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                              return "y";
                          }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringNumber))(Data_Semiring.semiringNumber)))(v7)(calcMove(v5)(v6)))(v1)();
                          var v9 = hitTestBgPiece(v3)(v1)();
                          return Control_Applicative.unless(Effect.applicativeEffect)(v9)(resetBgPiece(v3)(piece))();
                      };
                  };
              })(v1)();
              return piece;
          };
      };
      return function __do() {
          var v = Phina_Types_Size.getSize(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(scene)();
          var v1 = Phina_Util_Grid.getCenterPos(Phina_Display_DisplayScene.hasGridDisplayScene)(scene)();
          var v2 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_RectangleShape.newRectangleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))(Game_Style.style.bgPiecesStage))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Size_Builder.setSizeB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v1))(function () {
                  return Phina_App_Element_Builder.addChildToB(Phina_Display_RectangleShape.isElementRectangleShape)(Phina_Display_DisplayScene.containerDisplayScene)(scene);
              });
          }))();
          return Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Array.range(1)(Game_Style.style.bgPiece.num))(function (v3) {
              return newBgPiece(v2);
          })();
      };
  };
  exports["addBgPieces"] = addBgPieces;
  exports["splashBgPieces"] = splashBgPieces;
})(PS["Game.Scenes.Title.BgPieces"] = PS["Game.Scenes.Title.BgPieces"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Effect = PS["Effect"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var unsafeNewButton = function (params) {
      return function __do() {
          var v = Phina_Unsafe.unsafeNew("ui")("Button")({})();
          return Phina_Unsafe.unsafeSetProps(params)(v)();
      };
  };                                    
  var newButton = function (dictWritable) {
      return unsafeNewButton;
  };
  var hasPropertyButton = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };                                                        
  var edButton = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveButton = new Phina_App_Interactive.Interactive(function () {
      return edButton;
  });
  var isElementButton = new Phina_App_Element.IsElement(function () {
      return edButton;
  });
  var onPush = function (f) {
      return Phina_Util_EventDispatcher_Unsafe.unsafeOn(edButton)("push")(function (v) {
          return f;
      });
  };
  exports["newButton"] = newButton;
  exports["onPush"] = onPush;
  exports["hasPropertyButton"] = hasPropertyButton;
  exports["edButton"] = edButton;
  exports["isElementButton"] = isElementButton;
  exports["interactiveButton"] = interactiveButton;
})(PS["Phina.UI.Button"] = PS["Phina.UI.Button"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect = PS["Effect"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_UI_Button = PS["Phina.UI.Button"];
  var Prelude = PS["Prelude"];                 
  var onPushB = function ($0) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_UI_Button.onPush($0));
  };
  exports["onPushB"] = onPushB;
})(PS["Phina.UI.Button.Builder"] = PS["Phina.UI.Button.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_FSM = PS["Effect.FSM"];
  var Game_Computer_Anticipator_Worker = PS["Game.Computer.Anticipator.Worker"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Game_Player_Types = PS["Game.Player.Types"];
  var Game_Scenes_Main = PS["Game.Scenes.Main"];
  var Game_Scenes_Title_BgPieces = PS["Game.Scenes.Title.BgPieces"];
  var Game_Style = PS["Game.Style"];
  var Phina = PS["Phina"];
  var Phina_Accessor = PS["Phina.Accessor"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Async = PS["Phina.Types.Async"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Phina_Types_Position_Builder = PS["Phina.Types.Position.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Property_Builder = PS["Phina.Types.Property.Builder"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_UI_Button = PS["Phina.UI.Button"];
  var Phina_UI_Button_Builder = PS["Phina.UI.Button.Builder"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];
  var Type_Row = PS["Type.Row"];                 
  var NoOutput = (function () {
      function NoOutput() {

      };
      NoOutput.value = new NoOutput();
      return NoOutput;
  })();
  var Setting = (function () {
      function Setting(value0) {
          this.value0 = value0;
      };
      Setting.create = function (value0) {
          return new Setting(value0);
      };
      return Setting;
  })();
  var Exit = (function () {
      function Exit(value0) {
          this.value0 = value0;
      };
      Exit.create = function (value0) {
          return new Exit(value0);
      };
      return Exit;
  })();
  var NoInput = (function () {
      function NoInput() {

      };
      NoInput.value = new NoInput();
      return NoInput;
  })();
  var Select = (function () {
      function Select(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Select.create = function (value0) {
          return function (value1) {
              return new Select(value0, value1);
          };
      };
      return Select;
  })();
  var Start = (function () {
      function Start() {

      };
      Start.value = new Start();
      return Start;
  })();
  var updateSettingButtons = function (players) {
      return function (buttons) {
          return Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(buttons)(function (side) {
              return function (row) {
                  return Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(row)(function (typ) {
                      return function (button) {
                          var selected = Data_Maybe.maybe(false)(function (v) {
                              return Data_Eq.eq(Game_Player_Types.eqPlayerType)(v)(typ);
                          })(Data_Map_Internal.lookup(Game_Othello_Board.ordSide)(side)(players));
                          var props = (function () {
                              if (selected) {
                                  return Game_Style.style.selectButtonOn(side);
                              };
                              return Game_Style.style.selectButtonOff;
                          })();
                          return Phina_Types_Property.setProps(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(props)(button);
                      };
                  });
              };
          });
      };
  };
  var titleState = (function () {
      var stepSelect = function (side) {
          return function (typ) {
              return function (state) {
                  return Control_Applicative.pure(Effect.applicativeEffect)((function () {
                      var nextState = Data_Map_Internal.insert(Game_Othello_Board.ordSide)(side)(typ)(state);
                      return new Data_Tuple.Tuple(Data_Maybe.Just.create(new Setting(nextState)), nextState);
                  })());
              };
          };
      };
      var step = function (v) {
          return function (state) {
              if (v instanceof Select) {
                  return stepSelect(v.value0)(v.value1)(state);
              };
              if (v instanceof Start) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Exit(state)), state));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(Data_Maybe.Just.create(new Setting(state)), state));
          };
      };
      var initialState = Data_Map_Internal.fromFoldable(Game_Othello_Board.ordSide)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(Game_Othello_Board.Dark.value, Game_Player_Types.Human.value), new Data_Tuple.Tuple(Game_Othello_Board.Light.value, new Game_Player_Types.Com(Game_Player_Types.Lv2.value)) ]);
      return Effect_FSM.machine(step)(initialState)(NoInput.value)(NoOutput.value);
  })();
  var lockSettingButtons = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(Phina_App_Interactive.setInteractive(Phina_UI_Button.interactiveButton)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(false)));
  var addSettingPanel = function (scene) {
      return function (state) {
          return function __do() {
              var v = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_DisplayElement.newDisplayElement(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(Game_Style.style.settingPanel))(Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Effect_Class.liftEffect(Phina_Types_Builder.monadEffectBuilder)(Game_Style.layout.titleScene.settingPanel(scene)))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v))(function () {
                      return Phina_App_Element_Builder.addChildToB(Phina_Display_DisplayElement.isElementDisplayElement)(Phina_Display_DisplayScene.containerDisplayScene)(scene);
                  });
              }))();
              var v1 = Phina_Types_Size.getSize(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_DisplayElement.hasPropertyDisplayElement(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil))))(v)();
              var playerTypes = [ Game_Player_Types.Human.value, new Game_Player_Types.Com(Game_Player_Types.Lv1.value), new Game_Player_Types.Com(Game_Player_Types.Lv2.value), new Game_Player_Types.Com(Game_Player_Types.Lv3.value) ];
              var calcOffset = function (w) {
                  return function (n) {
                      return -w / 2.0 + w / 2.0 / Phina_Types_Numerical.number(Phina_Types_Numerical.numericalInt)(n);
                  };
              };
              var newGrid$prime = function (w) {
                  return function (n) {
                      return Phina_Util_Grid.newGrid(w)(n)(false)(calcOffset(w)(n));
                  };
              };
              var gridX = newGrid$prime(v1.width)(2);
              var gridY = newGrid$prime(v1.height)(4);
              var buttonSize = {
                  width: Phina_Util_Grid.getUnit(gridX),
                  height: Phina_Util_Grid.getUnit(gridY)
              };
              return Data_Functor.map(Effect.functorEffect)(Data_Map_Internal.fromFoldable(Game_Othello_Board.ordSide)(Data_Foldable.foldableArray))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (sx) {
                  return function (side) {
                      var x = Phina_Util_Grid.getSpan(sx)(gridX);
                      return function __do() {
                          var v2 = Data_Functor.map(Effect.functorEffect)(Data_Map_Internal.fromFoldable(Game_Player_Types.ordPlayerType)(Data_Foldable.foldableArray))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (sy) {
                              return function (typ) {
                                  var y = Phina_Util_Grid.getSpan(sy)(gridY);
                                  return function __do() {
                                      var v2 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_UI_Button.newButton(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.selectButton(buttonSize)))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder["setPositionB'"](Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(x)(y))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Accessor.setText(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Data_Show.show(Game_Player_Types.showPlayerType)(typ))))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Property_Builder.setPropsB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(Game_Style.style.selectButtonOff))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_UI_Button_Builder.onPushB(function (v2) {
                                                      return Effect_FSM.send(new Select(side, typ))(state);
                                                  }))(function () {
                                                      return Phina_App_Element_Builder.addChildToB(Phina_UI_Button.isElementButton)(Phina_Display_DisplayElement.containerDisplayElement)(v);
                                                  });
                                              });
                                          });
                                      }))();
                                      return new Data_Tuple.Tuple(typ, v2);
                                  };
                              };
                          })(playerTypes)))();
                          return new Data_Tuple.Tuple(side, v2);
                      };
                  };
              })([ Game_Othello_Board.Dark.value, Game_Othello_Board.Light.value ])))();
          };
      };
  };
  var titleScene = function (anticipator) {
      return Data_Functor["void"](Phina_Types_Async.functorAsync)(Data_Function.flip(Phina_Display_DisplayScene.popup(Phina_Display_DisplayScene.isSceneDisplayScene)(Phina_Display_DisplayScene.isSceneDisplayScene))({})(Phina_Display_DisplayScene.toSceneHandle(function (v) {
          return function (exit) {
              return function (scene) {
                  return function __do() {
                      var v1 = Phina_Accessor.setBackgroundColor(Phina_Types_Property.writableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Game_Style.style.titleScene.backgroundColor)(scene)();
                      var v2 = Game_Scenes_Title_BgPieces.addBgPieces(scene)();
                      var v3 = Game_Style.layout.titleScene.title(scene)();
                      var v4 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))(Game_Style.style.title))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v3))(function () {
                          return Phina_App_Element_Builder.addChildToB(Phina_Display_Label.isElementLabel)(Phina_Display_DisplayScene.containerDisplayScene)(scene);
                      }))();
                      var v5 = titleState();
                      var v6 = addSettingPanel(scene)(v5)();
                      var v7 = Game_Style.layout.titleScene.startButton(scene)();
                      var v8 = Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_UI_Button.newButton(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))))))))))(Game_Style.style.startButton))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v7))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_UI_Button_Builder.onPushB(function (v8) {
                              return Effect_FSM.send(Start.value)(v5);
                          }))(function () {
                              return Phina_App_Element_Builder.addChildToB(Phina_UI_Button.isElementButton)(Phina_Display_DisplayScene.containerDisplayScene)(scene);
                          });
                      }))();
                      Effect_FSM.receive(v5)(function (v9) {
                          if (v9 instanceof Setting) {
                              return updateSettingButtons(v9.value0)(v6);
                          };
                          if (v9 instanceof Exit) {
                              return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                  lockSettingButtons(v6)();
                                  var v10 = Phina_App_Interactive.setInteractive(Phina_UI_Button.interactiveButton)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(false)(v8)();
                                  return Data_Functor["void"](Effect.functorEffect)(Phina_Types_Property.setProps(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_UI_Button.hasPropertyButton(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))(Game_Style.style.startButtonPushed)(v8))();
                              }))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Game_Scenes_Title_BgPieces.splashBgPieces(scene)(v2))(function () {
                                      return Data_Functor["void"](Effect_Aff.functorAff)(Phina_Types_Monad_Builder.build(Phina_Types_Async.monadBuilderAsync)(Control_Bind.bind(Phina_Types_Async.bindAsync)(Game_Scenes_Main.mainScene({
                                          anticipator: anticipator,
                                          players: v9.value0
                                      }))(function (v10) {
                                          return Phina_Types_Async.liftBuilder(Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(exit({})));
                                      }))(scene));
                                  });
                              }));
                          };
                          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                      })();
                      return scene;
                  };
              };
          };
      })));
  };
  exports["titleScene"] = titleScene;
})(PS["Game.Scenes.Title"] = PS["Game.Scenes.Title"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Effect = PS["Effect"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_Scene = PS["Phina.Game.Scene"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var hasGridSplashScene = Phina_Util_Grid.HasGrid;
  var edSplashScene = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveSplashScene = new Phina_App_Interactive.Interactive(function () {
      return edSplashScene;
  });
  var isElementSplashScene = new Phina_App_Element.IsElement(function () {
      return edSplashScene;
  });
  var containerSplashScene = Phina_App_Element.Container;
  var isSceneSplashScene = new Phina_Display_DisplayScene.IsScene(function () {
      return containerSplashScene;
  }, function () {
      return edSplashScene;
  }, function () {
      return hasGridSplashScene;
  }, function () {
      return interactiveSplashScene;
  }, function () {
      return isElementSplashScene;
  }, function (v) {
      return "SplashScene";
  });
  var isGameSceneSplashScene = new Phina_Game_Scene.IsGameScene(function () {
      return isSceneSplashScene;
  });
  var splashScene = Phina_Game_Scene["toSceneHandle'"](isGameSceneSplashScene)(function (v) {
      return function (v1) {
          return Control_Applicative.pure(Effect.applicativeEffect);
      };
  });
  exports["splashScene"] = splashScene;
  exports["edSplashScene"] = edSplashScene;
  exports["isElementSplashScene"] = isElementSplashScene;
  exports["containerSplashScene"] = containerSplashScene;
  exports["hasGridSplashScene"] = hasGridSplashScene;
  exports["interactiveSplashScene"] = interactiveSplashScene;
  exports["isSceneSplashScene"] = isSceneSplashScene;
  exports["isGameSceneSplashScene"] = isGameSceneSplashScene;
})(PS["Phina.Game.SplashScene"] = PS["Phina.Game.SplashScene"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Main

  /* global phina */

  exports._runGame = function(app) {
    phina.main(function() {
      app.run();
    });
    return {};
  };

  exports.entryScene = function(e, s) {
    var className = getClassName();
    var ref;
    var superClass
      = (ref = phina.display[s.baseClass]) != null ? ref : phina.game[s.baseClass];

    phina.define('phina.game.' + className, {
      superClass: superClass,

      init: function(params) {
        this.superInit(params);

        this['scene params'] = params;

        return s.setup(params)(e)(this)();
      }
    });

    return {
      className: className,
      label: s.label,
      nextLabel: s.nextLabel
    };
  };

  exports.entryMainScene = function(exit, setup) {
    phina.define('phina.game.MainScene', {
      superClass: phina.display.DisplayScene,

      init: function(params) {
        this.superInit(params);

        this['scene params'] = params;

        return setup(params)(exit)(this)();
      }
    });

    return {};
  };

  var getClassName = (function() {
    var index = 0;

    return function() {
      return 'myScene' + index ++;
    };
  })();
})(PS["Phina.Main"] = PS["Phina.Main"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Main"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Asset_AssetLoader = PS["Phina.Asset.AssetLoader"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_CountScene = PS["Phina.Game.CountScene"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Game_LoadingScene = PS["Phina.Game.LoadingScene"];
  var Phina_Game_PauseScene = PS["Phina.Game.PauseScene"];
  var Phina_Game_ResultScene = PS["Phina.Game.ResultScene"];
  var Phina_Game_SplashScene = PS["Phina.Game.SplashScene"];
  var Phina_Game_TitleScene = PS["Phina.Game.TitleScene"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var Splash = (function () {
      function Splash() {

      };
      Splash.value = new Splash();
      return Splash;
  })();
  var Title = (function () {
      function Title() {

      };
      Title.value = new Title();
      return Title;
  })();
  var Main = (function () {
      function Main() {

      };
      Main.value = new Main();
      return Main;
  })();
  var Result = (function () {
      function Result() {

      };
      Result.value = new Result();
      return Result;
  })();
  var SceneList = (function () {
      function SceneList(value0) {
          this.value0 = value0;
      };
      SceneList.create = function (value0) {
          return new SceneList(value0);
      };
      return SceneList;
  })();
  var SceneListDefault = (function () {
      function SceneListDefault(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SceneListDefault.create = function (value0) {
          return function (value1) {
              return new SceneListDefault(value0, value1);
          };
      };
      return SceneListDefault;
  })();
  var runGame = Effect_Uncurried.runEffectFn1($foreign._runGame);
  var entrySceneListDefault = function (startScene) {
      return function (setup) {
          var startLabel = function (v) {
              if (v instanceof Splash) {
                  return "splash";
              };
              if (v instanceof Title) {
                  return "title";
              };
              if (v instanceof Main) {
                  return "main";
              };
              if (v instanceof Result) {
                  return "result";
              };
              throw new Error("Failed pattern match at Phina.Main line 150, column 5 - line 151, column 5: " + [ v.constructor.name ]);
          };
          return function __do() {
              $foreign.entryMainScene(Phina_Display_DisplayScene.exit, setup);
              return {
                  list: Data_Maybe.Nothing.value,
                  startLabel: Data_Maybe.Just.create(startLabel(startScene))
              };
          };
      };
  };
  var entrySceneList = function (list) {
      var getLabel = function (scene) {
          return scene.label;
      };
      return function __do() {
          var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Effect_Uncurried.runEffectFn2($foreign.entryScene)(Phina_Display_DisplayScene.exit))(list)();
          return {
              list: new Data_Maybe.Just(v),
              startLabel: Data_Functor.map(Data_Maybe.functorMaybe)(getLabel)(Data_Array.head(v))
          };
      };
  };
  var entryScenes = function (v) {
      if (v instanceof SceneList) {
          return entrySceneList(v.value0);
      };
      if (v instanceof SceneListDefault) {
          return entrySceneListDefault(v.value0)(v.value1);
      };
      throw new Error("Failed pattern match at Phina.Main line 134, column 1 - line 134, column 49: " + [ v.constructor.name ]);
  };
  var newGame = function (dictSubRow) {
      return function (params) {
          return function (scenes) {
              var setStartL = function (tl) {
                  return function (config) {
                      return Data_Maybe["maybe'"](function (v) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(config);
                      })(function (l) {
                          return Phina_Unsafe.unsafeSetProp("startLabel")(l)(config);
                      })(tl.startLabel);
                  };
              };
              var setScenes = function (tl) {
                  return function (config) {
                      return Data_Maybe["maybe'"](function (v) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(config);
                      })(function (t) {
                          return Phina_Unsafe.unsafeSetProp("scenes")(t)(config);
                      })(tl.list);
                  };
              };
              var makeConfig = function (p) {
                  return function (transList) {
                      return Control_Bind.composeKleisli(Effect.bindEffect)(Phina_Unsafe.unsafeSetProps(p))(Control_Bind.composeKleisli(Effect.bindEffect)(setScenes(transList))(setStartL(transList)));
                  };
              };
              return function __do() {
                  var v = entryScenes(scenes)();
                  var v1 = makeConfig(params)(v)({})();
                  return Phina_Unsafe.unsafeNew("game")("GameApp")(v1)();
              };
          };
      };
  };
  exports["Splash"] = Splash;
  exports["Title"] = Title;
  exports["Main"] = Main;
  exports["Result"] = Result;
  exports["SceneList"] = SceneList;
  exports["SceneListDefault"] = SceneListDefault;
  exports["newGame"] = newGame;
  exports["runGame"] = runGame;
})(PS["Phina.Main"] = PS["Phina.Main"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Effect_Class = PS["Effect.Class"];
  var Game_Computer_Anticipator_Worker = PS["Game.Computer.Anticipator.Worker"];
  var Game_Scenes_Title = PS["Game.Scenes.Title"];
  var Phina = PS["Phina"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_SplashScene = PS["Phina.Game.SplashScene"];
  var Phina_Main = PS["Phina.Main"];
  var Phina_Types_Async = PS["Phina.Types.Async"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];                 
  var scenes = Phina_Main.SceneListDefault.create(Phina_Main.Main.value)(function (v) {
      return function (v1) {
          return Phina_Types_Async["launchAsync'"](Control_Bind.bind(Phina_Types_Async.bindAsync)(Effect_Class.liftEffect(Phina_Types_Async.monadEffectAsync)(SimpleWorker.newWorker(Game_Computer_Anticipator_Worker.simpleWorkerAnticipator)("js/worker.js")))(function (v2) {
              return Control_Bind.bind(Phina_Types_Async.bindAsync)(Phina_Display_DisplayScene.popup(Phina_Game_SplashScene.isSceneSplashScene)(Phina_Display_DisplayScene.isSceneDisplayScene)(Phina_Game_SplashScene.splashScene)({}))(function (v3) {
                  return Phina_Types_Async.foreverAsync(Game_Scenes_Title.titleScene(v2));
              });
          }));
      };
  });
  exports["scenes"] = scenes;
})(PS["Game.Scenes"] = PS["Game.Scenes"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Effect = PS["Effect"];
  var Game_Config = PS["Game.Config"];
  var Game_Scenes = PS["Game.Scenes"];
  var Phina = PS["Phina"];
  var Phina_Main = PS["Phina.Main"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Prelude = PS["Prelude"];                 
  var game = Control_Bind.bind(Effect.bindEffect)(Phina_Main.newGame(Phina_Types_Row.subRowInstance())(Game_Config.config)(Game_Scenes.scenes))(Phina_Main.runGame);
  exports["game"] = game;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Effect = PS["Effect"];
  var Game = PS["Game"];
  var Prelude = PS["Prelude"];                 
  var main = Game.game;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
},{}]},{},[1]);
