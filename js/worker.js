(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };                                                 
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["ShowRecordFields"] = ShowRecordFields;
  exports["showRecordFields"] = showRecordFields;
  exports["showInt"] = showInt;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS["Type.Data.Row"] = PS["Type.Data.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {
      this.addRecord = addRecord;
      this.mulRecord = mulRecord;
      this.oneRecord = oneRecord;
      this.zeroRecord = zeroRecord;
  };
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringRecordNil = new SemiringRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });                                                                           
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function (dictRowToList) {
      return function (dictSemiringRecord) {
          return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return new SemiringRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                          };
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(one(dictSemiring))(tail);
                      };
                  }, function (v) {
                      return function (v1) {
                          var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(zero(dictSemiring))(tail);
                      };
                  });
              };
          };
      };
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["SemiringRecord"] = SemiringRecord;
  exports["addRecord"] = addRecord;
  exports["mulRecord"] = mulRecord;
  exports["oneRecord"] = oneRecord;
  exports["zeroRecord"] = zeroRecord;
  exports["semiringInt"] = semiringInt;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 119, column 3 - line 122, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];                 
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($116) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 376, column 3 - line 376, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $120 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($120) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 389, column 3 - line 389, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["intercalate"] = intercalate;
  exports["sum"] = sum;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["functorTuple"] = functorTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["traversableTuple"] = traversableTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($114) {
          return Data_Maybe.maybe([  ])(singleton)(f($114));
      });
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.FunctorWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var Primitive = {};
  var PrimitiveRecord = {};
  var primitiveString = Primitive;
  var primitiveRecordNil = PrimitiveRecord;
  var primitiveRecordCons = function (dictIsSymbol) {
      return function (dictPrimitive) {
          return function (dictPrimitiveRecord) {
              return function (dictListToRow) {
                  return PrimitiveRecord;
              };
          };
      };
  };
  var primitiveRecord = function (dictRowToList) {
      return function (dictListToRow) {
          return function (dictPrimitiveRecord) {
              return Primitive;
          };
      };
  };                              
  var primitiveInt = Primitive;
  var primitiveBoolean = Primitive;
  var primitiveArray = function (dictPrimitive) {
      return Primitive;
  };
  exports["Primitive"] = Primitive;
  exports["PrimitiveRecord"] = PrimitiveRecord;
  exports["primitiveBoolean"] = primitiveBoolean;
  exports["primitiveInt"] = primitiveInt;
  exports["primitiveString"] = primitiveString;
  exports["primitiveArray"] = primitiveArray;
  exports["primitiveRecordNil"] = primitiveRecordNil;
  exports["primitiveRecordCons"] = primitiveRecordCons;
  exports["primitiveRecord"] = primitiveRecord;
})(PS["Data.Primitive"] = PS["Data.Primitive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  var ListToRow = {};
  var listToRowNil = ListToRow;
  var listToCons = function (dictListToRow) {
      return function (dictCons) {
          return ListToRow;
      };
  };
  exports["RLProxy"] = RLProxy;
  exports["ListToRow"] = ListToRow;
  exports["listToRowNil"] = listToRowNil;
  exports["listToCons"] = listToCons;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var Primitivizable = function (Primitive0, evolve, primitivize) {
      this.Primitive0 = Primitive0;
      this.evolve = evolve;
      this.primitivize = primitivize;
  };
  var PrimitivizableRecord = function (ListToRow0, ListToRow1, evolveRecord, primitivizeRecord) {
      this.ListToRow0 = ListToRow0;
      this.ListToRow1 = ListToRow1;
      this.evolveRecord = evolveRecord;
      this.primitivizeRecord = primitivizeRecord;
  };
  var primitivizeRecord = function (dict) {
      return dict.primitivizeRecord;
  };
  var primitivize = function (dict) {
      return dict.primitivize;
  }; 
  var primitivizableRecordNil = new PrimitivizableRecord(function () {
      return Type_Row.listToRowNil;
  }, function () {
      return Type_Row.listToRowNil;
  }, function (v) {
      return function (v1) {
          return {};
      };
  }, function (v) {
      return function (v1) {
          return {};
      };
  });
  var primitivizableInt = new Primitivizable(function () {
      return Data_Primitive.primitiveInt;
  }, function (a) {
      return a;
  }, function (a) {
      return a;
  });
  var evolveRecord = function (dict) {
      return dict.evolveRecord;
  };
  var primitivizableRecord = function (dictRowToList) {
      return function (dictRowToList1) {
          return function (dictPrimitive) {
              return function (dictPrimitivizableRecord) {
                  return new Primitivizable(function () {
                      return dictPrimitive;
                  }, evolveRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value), primitivizeRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value));
              };
          };
      };
  };
  var evolve = function (dict) {
      return dict.evolve;
  };
  var primitivizableArray = function (dictPrimitivizable) {
      return new Primitivizable(function () {
          return Data_Primitive.primitiveArray(dictPrimitivizable.Primitive0());
      }, function (a) {
          return Data_Functor.map(Data_Functor.functorArray)(evolve(dictPrimitivizable))(a);
      }, function (a) {
          return Data_Functor.map(Data_Functor.functorArray)(primitivize(dictPrimitivizable))(a);
      });
  };
  var primitivizableRecordCons = function (dictIsSymbol) {
      return function (dictPrimitivizable) {
          return function (dictPrimitivizableRecord) {
              return function (dictListToRow) {
                  return function (dictListToRow1) {
                      return function (dictCons) {
                          return function (dictCons1) {
                              return new PrimitivizableRecord(function () {
                                  return Type_Row.listToCons(dictListToRow)(dictCons);
                              }, function () {
                                  return Type_Row.listToCons(dictListToRow1)(dictCons1);
                              }, function (v) {
                                  return function (r) {
                                      var tail = evolveRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value)(r);
                                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                      var insert = Record_Unsafe.unsafeSet(key);
                                      var get = Record_Unsafe.unsafeGet(key);
                                      return insert(evolve(dictPrimitivizable)(get(r)))(tail);
                                  };
                              }, function (v) {
                                  return function (r) {
                                      var tail = primitivizeRecord(dictPrimitivizableRecord)(Type_Row.RLProxy.value)(r);
                                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                      var insert = Record_Unsafe.unsafeSet(key);
                                      var get = Record_Unsafe.unsafeGet(key);
                                      return insert(primitivize(dictPrimitivizable)(get(r)))(tail);
                                  };
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Primitivizable"] = Primitivizable;
  exports["primitivize"] = primitivize;
  exports["evolve"] = evolve;
  exports["PrimitivizableRecord"] = PrimitivizableRecord;
  exports["primitivizeRecord"] = primitivizeRecord;
  exports["evolveRecord"] = evolveRecord;
  exports["primitivizableInt"] = primitivizableInt;
  exports["primitivizableArray"] = primitivizableArray;
  exports["primitivizableRecordNil"] = primitivizableRecordNil;
  exports["primitivizableRecordCons"] = primitivizableRecordCons;
  exports["primitivizableRecord"] = primitivizableRecord;
})(PS["Data.Primitivizable"] = PS["Data.Primitivizable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var Matrix = (function () {
      function Matrix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Matrix.create = function (value0) {
          return function (value1) {
              return new Matrix(value0, value1);
          };
      };
      return Matrix;
  })();
  var zipWith = function (f) {
      return function (v) {
          return function (v1) {
              var wc = Data_Ord.min(Data_Ord.ordInt)(v.value0)(v1.value0);
              var hc = Data_Ord.min(Data_Ord.ordInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(v.value1))(v.value0))(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(v1.value1))(v1.value0));
              var fc = function (i) {
                  var cy = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(wc);
                  var cx = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(wc);
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(f)(Data_Array.index(v.value1)((cy * v.value0 | 0) + cx | 0)))(Data_Array.index(v1.value1)((cy * v1.value0 | 0) + cx | 0));
              };
              var mc = Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(fc)(Data_Array.range(0)((wc * hc | 0) - 1 | 0)));
              return new Matrix(wc, mc);
          };
      };
  };
  var updateAt = function (x) {
      return function (y) {
          return function (a) {
              return function (v) {
                  var $49 = x < v.value0;
                  if ($49) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Matrix.create(v.value0))(Data_Array.updateAt((y * v.value0 | 0) + x | 0)(a)(v.value1));
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var primitivizableMatrix = function (dictPrimitivizable) {
      return new Data_Primitivizable.Primitivizable(function () {
          return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "values";
          }))(Data_Primitive.primitiveArray(dictPrimitivizable.Primitive0()))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
              return "width";
          }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()));
      }, function (v) {
          return Matrix.create(v.width)(Data_Primitivizable.evolve(Data_Primitivizable.primitivizableArray(dictPrimitivizable))(v.values));
      }, function (v) {
          return {
              width: v.value0,
              values: Data_Primitivizable.primitivize(Data_Primitivizable.primitivizableArray(dictPrimitivizable))(v.value1)
          };
      });
  };
  var index = function (x) {
      return function (y) {
          return function (v) {
              var $71 = 0 <= x && x < v.value0;
              if ($71) {
                  return Data_Array.index(v.value1)((y * v.value0 | 0) + x | 0);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var functorMatrix = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Matrix(m.value0, Data_Functor.map(Data_Functor.functorArray)(f)(m.value1));
      };
  });
  var functorWithIndexMatrix = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorMatrix;
  }, function (f) {
      return function (v) {
          return Matrix.create(v.value0)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(function (i) {
              return f({
                  x: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(v.value0),
                  y: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(v.value0)
              });
          })(v.value1));
      };
  });
  var filter = function (f) {
      return function (v) {
          return Data_Array.filter(f)(v.value1);
      };
  };
  var empty = new Matrix(0, [  ]);
  var fromArray = function (a) {
      var w = Data_Maybe.fromMaybe(0)(Data_Foldable.minimum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Array.length)(a)));
      var $130 = w > 0;
      if ($130) {
          return Matrix.create(w)(Data_Array.concat(Data_Functor.map(Data_Functor.functorArray)(Data_Array.take(w))(a)));
      };
      return empty;
  };
  var catMaybes = function (v) {
      return Data_Array.catMaybes(v.value1);
  };
  exports["empty"] = empty;
  exports["fromArray"] = fromArray;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["filter"] = filter;
  exports["zipWith"] = zipWith;
  exports["catMaybes"] = catMaybes;
  exports["functorMatrix"] = functorMatrix;
  exports["functorWithIndexMatrix"] = functorWithIndexMatrix;
  exports["primitivizableMatrix"] = primitivizableMatrix;
})(PS["Data.Matrix"] = PS["Data.Matrix"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  exports["log"] = $foreign.log;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
    "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Uncurried"];
  var Effect = PS["Effect"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Dark = (function () {
      function Dark() {

      };
      Dark.value = new Dark();
      return Dark;
  })();
  var Light = (function () {
      function Light() {

      };
      Light.value = new Light();
      return Light;
  })();
  var Blank = (function () {
      function Blank() {

      };
      Blank.value = new Blank();
      return Blank;
  })();
  var Off = (function () {
      function Off() {

      };
      Off.value = new Off();
      return Off;
  })();
  var Piece = (function () {
      function Piece(value0) {
          this.value0 = value0;
      };
      Piece.create = function (value0) {
          return new Piece(value0);
      };
      return Piece;
  })();
  var Corner = (function () {
      function Corner() {

      };
      Corner.value = new Corner();
      return Corner;
  })();
  var NCorner = (function () {
      function NCorner() {

      };
      NCorner.value = new NCorner();
      return NCorner;
  })();
  var Corner2 = (function () {
      function Corner2() {

      };
      Corner2.value = new Corner2();
      return Corner2;
  })();
  var Edge = (function () {
      function Edge() {

      };
      Edge.value = new Edge();
      return Edge;
  })();
  var Edge2 = (function () {
      function Edge2() {

      };
      Edge2.value = new Edge2();
      return Edge2;
  })();
  var Inside = (function () {
      function Inside() {

      };
      Inside.value = new Inside();
      return Inside;
  })();
  var showSide = new Data_Show.Show(function (v) {
      if (v instanceof Dark) {
          return "Dark";
      };
      if (v instanceof Light) {
          return "Light";
      };
      throw new Error("Failed pattern match at Game.Othello.Board line 32, column 1 - line 32, column 30: " + [ v.constructor.name ]);
  });
  var showPiece = new Data_Show.Show(function (v) {
      if (v instanceof Blank) {
          return "Blank";
      };
      if (v instanceof Off) {
          return "Off";
      };
      if (v instanceof Piece) {
          return Data_Show.show(showSide)(v.value0);
      };
      throw new Error("Failed pattern match at Game.Othello.Board line 50, column 1 - line 50, column 32: " + [ v.constructor.name ]);
  });
  var primitivizableSide = new Data_Primitivizable.Primitivizable(function () {
      return Data_Primitive.primitiveString;
  }, function (v) {
      if (v === "Light") {
          return Light.value;
      };
      return Dark.value;
  }, Data_Show.show(showSide));
  var primitivizablePiece = new Data_Primitivizable.Primitivizable(function () {
      return Data_Primitive.primitiveString;
  }, function (v) {
      if (v === "Blank") {
          return Blank.value;
      };
      if (v === "Dark") {
          return new Piece(Dark.value);
      };
      if (v === "Light") {
          return new Piece(Light.value);
      };
      return Off.value;
  }, Data_Show.show(showPiece));
  var getPieceByPos = function (board) {
      return function (pos) {
          return Data_Maybe.fromMaybe(Off.value)(Data_Matrix.index(pos.x)(pos.y)(board));
      };
  };
  var eqSide = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Dark && y instanceof Dark) {
              return true;
          };
          if (x instanceof Light && y instanceof Light) {
              return true;
          };
          return false;
      };
  });
  var isEnemy = function (v) {
      return function (v1) {
          if (v1 instanceof Piece) {
              return Data_Eq.notEq(eqSide)(v)(v1.value0);
          };
          return false;
      };
  };
  var isFriend = function (v) {
      return function (v1) {
          if (v1 instanceof Piece) {
              return Data_Eq.eq(eqSide)(v)(v1.value0);
          };
          return false;
      };
  }; 
  var eqPiece = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Blank && y instanceof Blank) {
              return true;
          };
          if (x instanceof Off && y instanceof Off) {
              return true;
          };
          if (x instanceof Piece && y instanceof Piece) {
              return Data_Eq.eq(eqSide)(x.value0)(y.value0);
          };
          return false;
      };
  });
  var enemy = function (v) {
      if (v instanceof Dark) {
          return Light.value;
      };
      if (v instanceof Light) {
          return Dark.value;
      };
      throw new Error("Failed pattern match at Game.Othello.Board line 41, column 1 - line 41, column 20: " + [ v.constructor.name ]);
  };
  var direction = {
      n: function (p) {
          return {
              x: p.x,
              y: p.y - 1 | 0
          };
      },
      ne: function (p) {
          return {
              x: p.x + 1 | 0,
              y: p.y - 1 | 0
          };
      },
      e: function (p) {
          return {
              x: p.x + 1 | 0,
              y: p.y
          };
      },
      se: function (p) {
          return {
              x: p.x + 1 | 0,
              y: p.y + 1 | 0
          };
      },
      s: function (p) {
          return {
              x: p.x,
              y: p.y + 1 | 0
          };
      },
      sw: function (p) {
          return {
              x: p.x - 1 | 0,
              y: p.y + 1 | 0
          };
      },
      w: function (p) {
          return {
              x: p.x - 1 | 0,
              y: p.y
          };
      },
      nw: function (p) {
          return {
              x: p.x - 1 | 0,
              y: p.y - 1 | 0
          };
      }
  };
  var directions = [ direction.n, direction.ne, direction.e, direction.se, direction.s, direction.sw, direction.w, direction.nw ];
  var getFlippablePieces = function (board) {
      return function (side) {
          return function (pos) {
              var getFlippable = function ($copy_dir) {
                  return function ($copy_pos$prime) {
                      return function ($copy_flippable) {
                          var $tco_var_dir = $copy_dir;
                          var $tco_var_pos$prime = $copy_pos$prime;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(dir, pos$prime, flippable) {
                              var pos$prime$prime = dir(pos$prime);
                              var piece = getPieceByPos(board)(pos$prime$prime);
                              var $42 = isEnemy(side)(piece);
                              if ($42) {
                                  $tco_var_dir = dir;
                                  $tco_var_pos$prime = pos$prime$prime;
                                  $copy_flippable = Data_Array.cons(pos$prime$prime)(flippable);
                                  return;
                              };
                              var $43 = isFriend(side)(piece);
                              if ($43) {
                                  $tco_done = true;
                                  return flippable;
                              };
                              $tco_done = true;
                              return [  ];
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_dir, $tco_var_pos$prime, $copy_flippable);
                          };
                          return $tco_result;
                      };
                  };
              };
              var v = getPieceByPos(board)(pos);
              if (v instanceof Off) {
                  return [  ];
              };
              if (v instanceof Piece) {
                  return [  ];
              };
              if (v instanceof Blank) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (f) {
                      return function (dir) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(f)(getFlippable(dir)(pos)([  ]));
                      };
                  })([  ])(directions);
              };
              throw new Error("Failed pattern match at Game.Othello.Board line 125, column 3 - line 128, column 72: " + [ v.constructor.name ]);
          };
      };
  };
  var isMovable = function (board) {
      return function (side) {
          return function (pos) {
              return !Data_Array["null"](getFlippablePieces(board)(side)(pos));
          };
      };
  };
  var maybeMovable = function (board) {
      return function (side) {
          return function (pos) {
              var $46 = isMovable(board)(side)(pos);
              if ($46) {
                  return new Data_Maybe.Just(pos);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var getMovablePos = function (board) {
      return function (side) {
          var f = function (v) {
              return function (v1) {
                  if (v1 instanceof Blank) {
                      return maybeMovable(board)(side)(v);
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
          return Data_Matrix.catMaybes(Data_FunctorWithIndex.mapWithIndex(Data_Matrix.functorWithIndexMatrix)(f)(board));
      };
  };
  var move = function (board) {
      return function (side) {
          return function (pos) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Matrix.updateAt(pos.x)(pos.y)(new Piece(side))(board))(function (v) {
                  var flippable = getFlippablePieces(board)(side)(pos);
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (b) {
                      return function (p) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(b)(Data_Matrix.updateAt(p.x)(p.y)(new Piece(side)));
                      };
                  })(new Data_Maybe.Just(v))(flippable);
              });
          };
      };
  };
  var getSafePlaces = function (board) {
      return function (side) {
          var checkSafeEach = function ($copy_dir) {
              return function ($copy_pos) {
                  var $tco_var_dir = $copy_dir;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dir, pos) {
                      var nextPos = dir(pos);
                      var piece = getPieceByPos(board)(nextPos);
                      if (piece instanceof Off) {
                          $tco_done = true;
                          return true;
                      };
                      if (piece instanceof Piece && Data_Eq.eq(eqSide)(piece.value0)(side)) {
                          $tco_var_dir = dir;
                          $copy_pos = nextPos;
                          return;
                      };
                      $tco_done = true;
                      return false;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dir, $copy_pos);
                  };
                  return $tco_result;
              };
          };
          var checkSafe = function (pos) {
              return function (piece) {
                  return Data_Eq.eq(eqPiece)(piece)(new Piece(side)) && ((checkSafeEach(direction.n)(pos) || checkSafeEach(direction.s)(pos)) && ((checkSafeEach(direction.ne)(pos) || checkSafeEach(direction.sw)(pos)) && ((checkSafeEach(direction.e)(pos) || checkSafeEach(direction.w)(pos)) && (checkSafeEach(direction.se)(pos) || checkSafeEach(direction.nw)(pos)))));
              };
          };
          return Data_FunctorWithIndex.mapWithIndex(Data_Matrix.functorWithIndexMatrix)(function (pos) {
              return function (p) {
                  return checkSafe(pos)(p);
              };
          })(board);
      };
  };
  var cellTypes = (function () {
      var cellTypeHalf = [ [ Corner.value, NCorner.value, Corner2.value, Edge.value, Edge.value, Corner2.value, NCorner.value, Corner.value ], [ NCorner.value, NCorner.value, Corner2.value, Inside.value, Inside.value, Corner2.value, NCorner.value, NCorner.value ], [ Corner2.value, Corner2.value, Corner2.value, Edge2.value, Edge2.value, Corner2.value, Corner2.value, Corner2.value ], [ Edge.value, Inside.value, Edge2.value, Inside.value, Inside.value, Edge2.value, Inside.value, Edge.value ] ];
      return Data_Matrix.fromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(cellTypeHalf)(Data_Array.reverse(cellTypeHalf)));
  })();
  exports["Dark"] = Dark;
  exports["Light"] = Light;
  exports["enemy"] = enemy;
  exports["Blank"] = Blank;
  exports["Off"] = Off;
  exports["Piece"] = Piece;
  exports["Corner"] = Corner;
  exports["NCorner"] = NCorner;
  exports["Corner2"] = Corner2;
  exports["Edge"] = Edge;
  exports["Edge2"] = Edge2;
  exports["Inside"] = Inside;
  exports["move"] = move;
  exports["getMovablePos"] = getMovablePos;
  exports["getFlippablePieces"] = getFlippablePieces;
  exports["cellTypes"] = cellTypes;
  exports["getSafePlaces"] = getSafePlaces;
  exports["eqSide"] = eqSide;
  exports["showSide"] = showSide;
  exports["primitivizableSide"] = primitivizableSide;
  exports["eqPiece"] = eqPiece;
  exports["showPiece"] = showPiece;
  exports["primitivizablePiece"] = primitivizablePiece;
})(PS["Game.Othello.Board"] = PS["Game.Othello.Board"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Prelude = PS["Prelude"];                 
  var calcScore = function (v) {
      return function (board) {
          return function (side) {
              return function (passCount) {
                  if (v > 0) {
                      var selectMax = function ($22) {
                          return Data_Maybe.fromMaybe(0)(Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray)($22));
                      };
                      var calcScoreEach = function (cost$prime) {
                          return function (side$prime) {
                              return function (pos) {
                                  var v1 = Game_Othello_Board.move(board)(side$prime)(pos);
                                  if (v1 instanceof Data_Maybe.Just) {
                                      return calcScore(cost$prime - 1 | 0)(v1.value0)(side$prime)(0);
                                  };
                                  if (v1 instanceof Data_Maybe.Nothing) {
                                      return 0;
                                  };
                                  throw new Error("Failed pattern match at Game.Computer.Anticipator line 30, column 7 - line 34, column 5: " + [ v1.constructor.name ]);
                              };
                          };
                      };
                      var nextSide = Game_Othello_Board.enemy(side);
                      var movable = Game_Othello_Board.getMovablePos(board)(nextSide);
                      var $11 = Data_Array["null"](movable);
                      if ($11) {
                          var $12 = passCount > 0;
                          if ($12) {
                              return calcScore(0)(board)(side)(2);
                          };
                          return -calcScore(v - 1 | 0)(board)(nextSide)(1) | 0;
                      };
                      var cost$prime = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(Data_Array.length(movable));
                      return -selectMax(Data_Functor.map(Data_Functor.functorArray)(calcScoreEach(cost$prime)(nextSide))(movable)) | 0;
                  };
                  var isFinished = function (board$prime) {
                      return Data_Array["null"](Game_Othello_Board.getMovablePos(board$prime)(Game_Othello_Board.Dark.value)) && Data_Array["null"](Game_Othello_Board.getMovablePos(board$prime)(Game_Othello_Board.Light.value));
                  };
                  var cellTypeScore = function (v1) {
                      if (v1 instanceof Game_Othello_Board.Corner) {
                          return 200;
                      };
                      if (v1 instanceof Game_Othello_Board.NCorner) {
                          return -100 | 0;
                      };
                      if (v1 instanceof Game_Othello_Board.Corner2) {
                          return 20;
                      };
                      if (v1 instanceof Game_Othello_Board.Edge) {
                          return 10;
                      };
                      if (v1 instanceof Game_Othello_Board.Edge2) {
                          return 2;
                      };
                      if (v1 instanceof Game_Othello_Board.Inside) {
                          return 1;
                      };
                      throw new Error("Failed pattern match at Game.Computer.Anticipator line 78, column 21 - line 86, column 5: " + [ v1.constructor.name ]);
                  };
                  var calcSideScore = function (side$prime) {
                      return function (board$prime) {
                          var safePlaces = Game_Othello_Board.getSafePlaces(board$prime)(side$prime);
                          var movableNum = Data_Array.length(Game_Othello_Board.getMovablePos(board$prime)(side$prime));
                          var cellTypes$prime = Data_Matrix.zipWith(function (s) {
                              return function (t) {
                                  if (s) {
                                      return Game_Othello_Board.Corner.value;
                                  };
                                  return t;
                              };
                          })(safePlaces)(Game_Othello_Board.cellTypes);
                          var typedBoard = Data_Matrix.zipWith(Data_Tuple.Tuple.create)(board$prime)(cellTypes$prime);
                          var pieceScore = Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(cellTypeScore)(Data_Tuple.snd))(Data_Matrix.filter(function (v1) {
                              return Data_Eq.eq(Game_Othello_Board.eqPiece)(v1.value0)(new Game_Othello_Board.Piece(side$prime));
                          })(typedBoard)));
                          return pieceScore + (movableNum * 5 | 0) | 0;
                      };
                  };
                  var calcNowScore = (function () {
                      var friendPieceScore = calcSideScore(side)(board);
                      var enemyPieceScore = calcSideScore(Game_Othello_Board.enemy(side))(board);
                      return friendPieceScore - enemyPieceScore | 0;
                  })();
                  var calcLastScore = (function () {
                      var countPiece = function (side$prime) {
                          return function ($23) {
                              return Data_Array.length(Data_Matrix.filter(function (v1) {
                                  return Data_Eq.eq(Game_Othello_Board.eqPiece)(v1)(new Game_Othello_Board.Piece(side$prime));
                              })($23));
                          };
                      };
                      var enemyPieceScore = countPiece(Game_Othello_Board.enemy(side))(board);
                      var friendPieceScore = countPiece(side)(board);
                      var score = friendPieceScore - enemyPieceScore | 0;
                      var $18 = score > 0;
                      if ($18) {
                          return (score * 100 | 0) + 20000 | 0;
                      };
                      var $19 = score < 0;
                      if ($19) {
                          return (score * 100 | 0) - 20000 | 0;
                      };
                      return score;
                  })();
                  var $20 = passCount >= 2;
                  if ($20) {
                      return calcLastScore;
                  };
                  var $21 = isFinished(board);
                  if ($21) {
                      return calcLastScore;
                  };
                  return calcNowScore;
              };
          };
      };
  };
  exports["calcScore"] = calcScore;
})(PS["Game.Computer.Anticipator"] = PS["Game.Computer.Anticipator"] || {});
(function(exports) {

  exports._response = function(callback) {
    onmessage = function(e) {
      postMessage(callback(e.data)());
    };
  }
})(PS["SimpleWorker"] = PS["SimpleWorker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["SimpleWorker"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Primitive = PS["Data.Primitive"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var SimpleWorker = function (Primitive0, Primitive1) {
      this.Primitive0 = Primitive0;
      this.Primitive1 = Primitive1;
  };
  var response = function (dictSimpleWorker) {
      return function (v) {
          return Effect_Uncurried.runEffectFn1($foreign._response);
      };
  };
  exports["SimpleWorker"] = SimpleWorker;
  exports["response"] = response;
})(PS["SimpleWorker"] = PS["SimpleWorker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];
  var Type_Row = PS["Type.Row"];                 
  var Result = function (x) {
      return x;
  };
  var simpleWorkerAnticipator = new SimpleWorker.SimpleWorker(function () {
      return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "board";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "values";
      }))(Data_Primitive.primitiveArray(Data_Primitive.primitiveString))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "depth";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "side";
      }))(Data_Primitive.primitiveString)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())()));
  }, function () {
      return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "isValid";
      }))(Data_Primitive.primitiveBoolean)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "pos";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()));
  });
  var primitivizableResult = new Data_Primitivizable.Primitivizable(function () {
      return Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "isValid";
      }))(Data_Primitive.primitiveBoolean)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "pos";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "x";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "y";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()));
  }, function (v) {
      if (v.isValid) {
          return Result(new Data_Maybe.Just(v.pos));
      };
      if (!v.isValid) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Game.Computer.Anticipator.Worker line 20, column 1 - line 21, column 73: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Data_Maybe.Just) {
          return {
              isValid: true,
              pos: v.value0
          };
      };
      if (v instanceof Data_Maybe.Nothing) {
          return {
              isValid: false,
              pos: Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "x";
              }))()(Data_Semiring.semiringRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "y";
              }))()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringInt))(Data_Semiring.semiringInt)))
          };
      };
      throw new Error("Failed pattern match at Game.Computer.Anticipator.Worker line 20, column 1 - line 21, column 73: " + [ v.constructor.name ]);
  });
  exports["Result"] = Result;
  exports["primitivizableResult"] = primitivizableResult;
  exports["simpleWorkerAnticipator"] = simpleWorkerAnticipator;
})(PS["Game.Computer.Anticipator.Worker"] = PS["Game.Computer.Anticipator.Worker"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Matrix = PS["Data.Matrix"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Primitive = PS["Data.Primitive"];
  var Data_Primitivizable = PS["Data.Primitivizable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Random = PS["Effect.Random"];
  var Game_Computer_Anticipator = PS["Game.Computer.Anticipator"];
  var Game_Computer_Anticipator_Worker = PS["Game.Computer.Anticipator.Worker"];
  var Game_Othello_Board = PS["Game.Othello.Board"];
  var Prelude = PS["Prelude"];
  var SimpleWorker = PS["SimpleWorker"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];                 
  var think = function (v) {
      var tapLogSafe = function (a) {
          var board$prime = Data_Maybe.fromMaybe(v.board)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Game_Othello_Board.move(v.board)(v.side))(a));
          var safeNum = Data_Array.length(Data_Matrix.filter(Control_Category.identity(Control_Category.categoryFn))(Game_Othello_Board.getSafePlaces(board$prime)(v.side)));
          return Data_Functor.voidRight(Effect.functorEffect)(a)(Effect_Console.log("Safe: " + Data_Show.show(Data_Show.showInt)(safeNum)));
      };
      var tapLog = function (a) {
          var sideStr = (function () {
              var $4 = Data_Eq.eq(Game_Othello_Board.eqSide)(v.side)(Game_Othello_Board.Dark.value);
              if ($4) {
                  return "Dark";
              };
              return "Light";
          })();
          var showScore = function ($12) {
              return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" , ")(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                  return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "x";
                  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                      return "y";
                  }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showInt)))(v1.value0) + (": " + Data_Show.show(Data_Show.showInt)(v1.value1));
              })($12));
          };
          return Data_Functor.voidRight(Effect.functorEffect)(a)(Effect_Console.log(sideStr + (": " + showScore(a))));
      };
      var selectBest = function ($13) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Foldable.maximumBy(Data_Foldable.foldableArray)(Data_Function.on(Data_Ord.compare(Data_Ord.ordInt))(Data_Tuple.snd))($13));
      };
      var move$prime = function (pos) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(pos))(Game_Othello_Board.move(v.board)(v.side)(pos));
      };
      var calcScore$prime = (function () {
          var addRandom = function (score) {
              return Data_Functor.map(Effect.functorEffect)(function (v1) {
                  return score + v1 | 0;
              })(Effect_Random.randomInt(0)(5));
          };
          var calc = function (board$prime) {
              return addRandom(Game_Computer_Anticipator.calcScore(v.depth)(board$prime)(v.side)(0));
          };
          return function ($14) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Functor.map(Data_Functor.functorArray)(function ($15) {
                  return Data_Traversable.sequence(Data_Tuple.traversableTuple)(Effect.applicativeEffect)(Data_Functor.map(Data_Tuple.functorTuple)(calc)($15));
              })($14));
          };
      })();
      var select = function (movable) {
          return Control_Bind.bindFlipped(Effect.bindEffect)(tapLogSafe)(Data_Functor.map(Effect.functorEffect)(selectBest)(Control_Bind.bindFlipped(Effect.bindEffect)(tapLog)(calcScore$prime(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(move$prime)(movable))))));
      };
      var movable = Game_Othello_Board.getMovablePos(v.board)(v.side);
      var $8 = Data_Array["null"](movable);
      if ($8) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
      };
      return select(movable);
  };
  var main = SimpleWorker.response(Game_Computer_Anticipator_Worker.simpleWorkerAnticipator)(Type_Proxy["Proxy"].value)(function (args) {
      return Data_Functor.map(Effect.functorEffect)(function ($16) {
          return Data_Primitivizable.primitivize(Game_Computer_Anticipator_Worker.primitivizableResult)(Game_Computer_Anticipator_Worker.Result($16));
      })(think(Data_Primitivizable.evolve(Data_Primitivizable.primitivizableRecord()()(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "board";
      }))(Data_Primitive.primitiveRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "values";
      }))(Data_Primitive.primitiveArray(Data_Primitive.primitiveString))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "width";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())))(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "depth";
      }))(Data_Primitive.primitiveInt)(Data_Primitive.primitiveRecordCons(new Data_Symbol.IsSymbol(function () {
          return "side";
      }))(Data_Primitive.primitiveString)(Data_Primitive.primitiveRecordNil)(Type_Row.listToCons(Type_Row.listToRowNil)()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())()))(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())))(Data_Primitivizable.primitivizableRecordCons(new Data_Symbol.IsSymbol(function () {
          return "board";
      }))(Data_Matrix.primitivizableMatrix(Game_Othello_Board.primitivizablePiece))(Data_Primitivizable.primitivizableRecordCons(new Data_Symbol.IsSymbol(function () {
          return "depth";
      }))(Data_Primitivizable.primitivizableInt)(Data_Primitivizable.primitivizableRecordCons(new Data_Symbol.IsSymbol(function () {
          return "side";
      }))(Game_Othello_Board.primitivizableSide)(Data_Primitivizable.primitivizableRecordNil)(Type_Row.listToRowNil)(Type_Row.listToRowNil)()())(Type_Row.listToCons(Type_Row.listToRowNil)())(Type_Row.listToCons(Type_Row.listToRowNil)())()())(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())()()))(args)));
  });
  exports["main"] = main;
})(PS["Game.Computer.Anticipator.Server"] = PS["Game.Computer.Anticipator.Server"] || {});
PS["Game.Computer.Anticipator.Server"].main();
},{}]},{},[1]);
